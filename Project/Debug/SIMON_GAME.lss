
AVRASM ver. 2.2.7  C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm Wed Aug 08 19:30:02 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(169): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\INITIALIZATION.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(170): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\SCREEN_PRINT_LOOP.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(171): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\RANDOM_NUM.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(172): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\SEE_SEQ.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(173): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\REDO_SEQ.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(174): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\OTHER_FUNCTIONS.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(169): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\INITIALIZATION.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(170): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\SCREEN_PRINT_LOOP.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(171): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\RANDOM_NUM.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(172): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\SEE_SEQ.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(173): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\REDO_SEQ.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(174): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\OTHER_FUNCTIONS.inc'
                                 
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 /************************************\
                                 |* SECOND TERM PROJECT : SIMON GAME *|
                                 |*     AUTHOR : FLORENCE BARRAS     *|
                                 |*            SUMMER 2018           *|
                                 |*           SIMON_GAME.asm         *|
                                 \************************************/
                                 
                                 
                                 .INCLUDE "m328pdef.inc"				; Load addresses of (I/O) registers
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 /**********\
                                 |* MACROS *|
                                 \**********/
                                 
                                 .MACRO KEYBOARD_CHECK_COL			; Row x is LOW, check columns
                                 	NOP
                                 	SBIS PIND,3						; Skip next instruction if not pressed
                                 	RJMP @0
                                 	SBIS PIND,2
                                 	RJMP @1
                                 	SBIS PIND,1
                                 	RJMP @2
                                 	SBIS PIND,0
                                 	RJMP @3
                                 	RJMP @4
                                 .ENDMACRO
                                 
                                 .MACRO FIND_SCORES					; @0 score  @1  ten   @2 unit
                                 	LDI R26,0x64
                                 	CP @0,R26					
                                 	BRGE except						;  Branch if current score >= 100
                                 	LDI @1,0x00
                                 	LDI R18,0x0A
                                 	LDI R27,0x0A
                                 	decaade:
                                 		CP @0,R18
                                 		BRLO numbers
                                 		ADD R18,R27
                                 		INC @1
                                 		BRNE decaade
                                 	numbers:
                                 		SUB R18,R27
                                 		SUB @0,R18
                                 		LDI @2,0x00
                                 		loopnb:
                                 			CPSE @0,@2
                                 			RJMP notthis
                                 			RJMP end_mac
                                 		notthis:
                                 			INC @2
                                 			BRNE loopnb
                                 	except:
                                 		LDI @1,0x09
                                 		LDI @2,0x09
                                 		RJMP end_mac
                                 	end_mac:
                                 .ENDMACRO
                                 
                                 .MACRO DELAY_MACRO
                                 	CALL Buzzer_loop	
                                 	LDI R26,0x01 
                                 	LDI R27,0x02
                                 	LDI R28,0x80
                                 	loop13:
                                 		loop23:
                                 			loop33:
                                 				LDI ZH,high(@1<<1)
                                 				LDI ZL,low(@1<<1)
                                 				CALL SCREEN_PRINT_LOOP
                                 				SBIC PINB,2
                                 				RJMP NoJoy
                                 				RJMP @0
                                 				NoJoy:
                                 				DEC R28
                                 				BRNE loop33
                                 			DEC R27
                                 			BRNE loop23
                                 		DEC R26
                                 		BRNE loop13
                                 .ENDMACRO
                                 
                                 
                                 .MACRO MACRO_PRINT_SCORE
                                 	LDI R16,0   
                                 	CPSE R21,R16					
                                 	RJMP step1 
                                 	LDI ZH, high(@0<<1)  
                                 	LDI ZL, low(@0<<1)
                                 	RJMP end_of_macro
                                 	step1:
                                 		LDI R16,1   
                                 		CPSE R21,R16					
                                 		RJMP step2 
                                 		LDI ZH, high(@1<<1)  
                                 		LDI ZL, low(@1<<1)
                                 		RJMP end_of_macro
                                 	step2:
                                 		LDI R16,2   
                                 		CPSE R21,R16					
                                 		RJMP step3 
                                 		LDI ZH, high(@2<<1)  
                                 		LDI ZL, low(@2<<1)
                                 		RJMP end_of_macro
                                 	step3:
                                 		LDI R16,3   
                                 		CPSE R21,R16					
                                 		RJMP step4 
                                 		LDI ZH, high(@3<<1)  
                                 		LDI ZL, low(@3<<1)
                                 		RJMP end_of_macro
                                 	step4:
                                 		LDI R16,4   
                                 		CPSE R21,R16					
                                 		RJMP step5 
                                 		LDI ZH, high(@4<<1)  
                                 		LDI ZL, low(@4<<1)
                                 		RJMP end_of_macro
                                 	step5:
                                 		LDI R16,5   
                                 		CPSE R21,R16					
                                 		RJMP step6 
                                 		LDI ZH, high(@5<<1)  
                                 		LDI ZL, low(@5<<1)
                                 		RJMP end_of_macro
                                 	step6:
                                 		LDI R16,6   
                                 		CPSE R21,R16					
                                 		RJMP step7 
                                 		LDI ZH, high(@6<<1)  
                                 		LDI ZL, low(@6<<1)
                                 		RJMP end_of_macro
                                 	step7:
                                 		LDI R16,7   
                                 		CPSE R21,R16					
                                 		RJMP step8 
                                 		LDI ZH, high(@7<<1)  
                                 		LDI ZL, low(@7<<1)
                                 		RJMP end_of_macro
                                 	step8:
                                 		LDI R16,8   
                                 		CPSE R21,R16					
                                 		RJMP step9 
                                 		LDI ZH, high(@8<<1)  
                                 		LDI ZL, low(@8<<1)
                                 		RJMP end_of_macro
                                 	step9:
                                 		LDI ZH, high(@9<<1)  
                                 		LDI ZL, low(@9<<1)
                                 		RJMP end_of_macro
                                 	end_of_macro:
                                 		CALL SCREEN_PRINT_LOOP
                                 .ENDMACRO
                                 
                                 
                                 /*********************\
                                 |* BEGINNING OF CODE *|
                                 \*********************/
                                 
                                 .ORG 0x0000
000000 c265                      RJMP init1
                                 .ORG 0x001A									; Program address for timer/counter 1 overflow
00001a c4bc                      RJMP Timer1OverflowInterrupt
                                 .ORG 0x0020									; Program address for timer/counter 0 overflow
000020 c4ad                      RJMP Timer0OverflowInterrupt
                                 
                                 
                                 .INCLUDE "INITIALIZATION.inc"
                                 
                                  * INITIALIZATION.inc
                                  * Initialization of the I/O
                                  */ 
                                 
                                 INITIALIZATION:
                                 
                                 	; Switch
000021 9820                      	CBI DDRB,0						; Pin PB0 is an input
000022 9a28                      	SBI PORTB,0 					; Enable the pull-up resistor
                                 
                                 	; Joystick
000023 9822                      	CBI DDRB,2								; Pin PB2 is an input
000024 9a2a                      	SBI PORTB,2								; Enable the pull-up resistor
                                 
                                 	; Buzzer
000025 9a21                      	SBI DDRB,1								; Pin PB1 is an output (buzzer)
                                 
                                 	; Screen 
000026 9a23                      	SBI DDRB,3
000027 9a24                      	SBI DDRB,4
000028 9a25                      	SBI DDRB,5						
000029 9a2b                      	SBI PORTB,3								; If PORTxn is written to '1' when the pin is 
00002a 9a2c                      	SBI PORTB,4								; configured as an output pin, the port pin is driven high.
00002b 9a2d                      	SBI PORTB,5
                                 
                                 
                                 	; Keyboard
                                 	; Rows (7 - first row,6,5,4) are outputs (bits set)
                                 	; Columns (3 - first column,2,1,0) are inputs (bits cleared)
00002c efa0                      	LDI R26,0xF0
00002d b9aa                      	OUT DDRD,R26
                                 	; Columns : enable pull-up (bits set)
00002e 9a5b                      	SBI PORTD,3
00002f 9a5a                      	SBI PORTD,2
000030 9a59                      	SBI PORTD,1
000031 9a58                      	SBI PORTD,0
                                 
                                 
                                 	; Start Timer			
000032 e014                      	LDI R17,0x04
000033 9310 0081                 	STS TCCR1B,R17							; Prescaler 256
000035 9478                      	SEI										; enable global interrupt & timer1 interrupt
000036 e011                      	LDI R17,0x01
000037 9310 006f                 	STS TIMSK1,R17
000039 e010                      	LDI R17,0x00
00003a 9310 0003                 	STS PRTIM1,R17
00003c e805                      	LDI R16,0x85							; TCNTinit  (0xFFFF - 16e6 / (256 * 2))  --> 2Hz
00003d ee1d                      	LDI R17,0xED
00003e 9300 0085                 	STS TCNT1H,R16
000040 9310 0084                 	STS TCNT1L,R17
                                 
                                 
                                 .INCLUDE "SCREEN_PRINT_LOOP.inc"
000042 9508                      
                                  * SCREEN_PRINT_LOOP.inc
                                  * Used to print different things on the screen, based on the bytes stored in program memory
                                  * These bytes are loaded using LPM instruction, which loads one byte pointed to by the Z-register 
                                  * into the chosen destination register
                                  */ 
                                  
                                 
                                 SCREEN_PRINT_LOOP:
000043 e410                      	LDI R17,0b01000000			; Position of the row ON
                                 	PrintScreenLoop:			; Loop on the rows
000044 d003                      		RCALL ScreenLoop
000045 9516                      		LSR R17 
000046 f7e9                      		BRNE PrintScreenLoop
000047 9508                      	RET
                                 
                                 
                                 
                                 ScreenLoop:						; Turn on one row
000048 93af                      	PUSH R26
000049 93bf                      	PUSH R27
00004a 930f                      	PUSH R16	
00004b e0aa                      	LDI R26,0x0A				
                                 	Loop_on_columns:			; Loop on the 10 bytes pointed by Z
00004c 91b5                      		LPM R27,Z+				; Loads one byte pointed to by the Z-register into the destination register Rd. Z is then incremented
00004d e008                      		LDI R16,0x08
00004e 940e 006a                 		CALL on_or_off 			; Loop on the byte stored in R27  ("Turn on" (bit = 1) or "turn off" (bit = 0) the columns) 
000050 95aa                      		DEC R26
000051 f7d1                      		BRNE Loop_on_columns
000052 e008                      	LDI R16,0x08
000053 2fb1                      	MOV R27,R17
000054 940e 006a                 	CALL on_or_off				; "Turn on" one row, "turn off" the others
000056 9a2c                      	SBI PORTB,4 
000057 d00f                      	RCALL pause 
000058 982c                      	CBI PORTB,4 
000059 910f                      	POP R16
00005a 91bf                      	POP R27
00005b 91af                      	POP R26
00005c 9508                      	RET
                                 
                                 
                                 
                                 pause1:
00005d efaf                      	LDI R26,0xFF
                                 	loop_pause1:
00005e 95aa                      		DEC R26
00005f efbf                      		LDI R27,0xFF
                                 		loop_pause2:
000060 95ba                      			DEC R27
000061 ef9f                      			LDI R25,0xFF
                                 			loop_pause3:
000062 959a                      				DEC R25
000063 f7f1                      				BRNE loop_pause3
000064 f7d9                      			BRNE loop_pause2	
000065 f7c1                      		BRNE loop_pause1
000066 9508                      	RET 
                                 
                                 pause:
000067 dff5                      	RCALL pause1
000068 dff4                      	RCALL pause1
000069 9508                      	RET
                                 
                                 
                                 on_or_off:
00006a 982b                      	CBI PORTB,3
00006b fdb7                      	SBRC R27,7 				; Skip next instruction if MSB of R27 is cleared  (turn on if bit = 1)
00006c 9a2b                      	SBI PORTB,3
00006d 9a2d                      	SBI PORTB,5
00006e 982d                      	CBI PORTB,5
00006f 0fbb                      	LSL R27				
000070 950a                      	DEC R16
000071 f7c1                      	BRNE on_or_off
                                 .INCLUDE "RANDOM_NUM.inc"
000072 9508                      
                                  * RANDOM_NUM.inc
                                  * Generate a random number between 1 and 4, stored in R20. Linear congruential algorithm
                                  */ 
                                 
                                 
                                  
                                 RANDOM_NUM:
                                 	
                                 	; First generate a one-byte pseudo-random number (so that period is high enough to have a 'good' pseudo-random number)
                                 	; Algorithm implemented: Linear-Congruential Generator: x = (a * x_prev + b) modulo m   , m = 128
                                 
000073 e0a5                      	LDI R26,0x05				; a = 5 (for generation of random numbers)
                                 
000074 9fda                      	MUL R29,R26
000075 0180                      	MOVW R16,R0					; R16: low bits / R17: high bits
000076 e0a3                      	LDI R26,0x03				; b = 3
000077 0f0a                      	ADD R16,R26
                                 
                                 
000078 2fd0                      	MOV R29,R16					; update
                                 
                                 	; R29 contains a pseudo-random byte. To generate a pseudo-random number between 1 and 4, we keep only 2 bits of R29 and we add 1
                                 
000079 2f40                      	MOV R20,R16
00007a 714f                      	CBR R20,$E0		
00007b 7f48                      	CBR R20,$07	
00007c 9546                      	LSR R20
00007d 9546                      	LSR R20
00007e 9546                      	LSR R20	
00007f 9543                      	INC R20
                                 
000080 9508                      	RET
                                 .INCLUDE "SEE_SEQ.inc"
                                 
                                  * SEE_SEQ.inc
                                  * One random part of the screen is lit up. This action is repeated to form a sequence of a certain length
                                  */ 
                                 
                                 SEE_SEQ:
                                 
                                 	show_seq:
000081 940e 0073                 		CALL RANDOM_NUM		; Give a random number stored in R20 to know which part of the board must be lit up
000083 e0a1                      		LDI R26,0x01
000084 134a                      		CPSE R20,R26			
000085 c001                      		RJMP next1
000086 c008                      		RJMP First_quart
                                 
                                 		next1:
000087 e0a2                      			LDI R26,0x02
000088 134a                      			CPSE R20,R26
000089 c001                      			RJMP next2
00008a c007                      			RJMP Second_quart
                                 		next2:
00008b e0a3                      			LDI R26,0x03
00008c 134a                      			CPSE R20,R26
00008d c00a                      			RJMP Fourth_quart
00008e c006                      			RJMP Third_quart
                                 		
                                 		First_quart:	
00008f 940e 0157                 			CALL FIRST_PART
000091 c009                      			RJMP cont
                                 
                                 		Second_quart:
000092 940e 0162                 			CALL SECOND_PART
000094 c006                      			RJMP cont
                                 
                                 		Third_quart:
000095 940e 016f                 			CALL THIRD_PART
000097 c003                      			RJMP cont
                                 
                                 		Fourth_quart:
000098 940e 017c                 			CALL FOURTH_PART
00009a c000                      			RJMP cont
                                 
                                 		cont:
                                 			; Delay depending on speed (controlled via R19, incremented every 0.5s)
00009b e5af                      			LDI R26,0x5F 
00009c 1ba3                      			SUB R26,R19  
00009d e0b3                      			LDI R27,0x03
00009e e1c0                      			LDI R28,0x10
00009f d0a9                      			RCALL Delay				
                                 
                                 			; 'Turn off' screen between each 'member' of the sequence
0000a0 940e 0187                 			CALL TURN_OFF
0000a2 e2a0                      			LDI R26,0x20
0000a3 efbf                      			LDI R27,0xFF
0000a4 efcf                      			LDI R28,0xFF
0000a5 940e 0149                 			CALL Delay
                                 
                                 			; check if sequence is over or not
0000a7 e0a1                      			LDI R26,0x01
0000a8 13ae                      			CPSE R26,R30			
0000a9 c001                      			RJMP continue_seq
0000aa c002                      			RJMP stop_seq
                                 	
                                 	continue_seq:
0000ab 95ea                      		DEC R30
0000ac cfd4                      		RJMP show_seq
                                 
                                 	stop_seq:
0000ad 2fd6                      		MOV R29,R22			; Seed for generation of random numbers
0000ae 2fef                      		MOV R30,R31	
0000af e080                      		LDI R24,0x00
                                 .INCLUDE "REDO_SEQ.inc"
0000b0 9508                      
                                  * REDO_SEQ.inc
                                  * The user has to redo the sequence. If he succeeds, the length of the sequence is increased. If he fails, the game ends
                                  */ 
                                 
                                 REDO_SEQ:
                                 
                                 	; "Reload" random sequence to check 
0000b1 940e 0073                 	CALL RANDOM_NUM
                                 
                                 	waiting:
0000b3 9a5f                      		SBI PORTD,7															
0000b4 9a5e                      		SBI PORTD,6
0000b5 9a5d                      		SBI PORTD,5
0000b6 9a5c                      		SBI PORTD,4
0000b7 ef2e                      		LDI R18,0xFE
                                 		; If R24 > 30, ends game (15s of inactivity)
0000b8 e1ae                      		LDI R26,0x1E
0000b9 138a                      		CPSE R24,R26
0000ba c001                      		RJMP not_ending					
0000bb c068                      		RJMP error		
                                 
                                 	not_ending:																	; Keyboard: 4 steps method
                                 		row1_low:													
0000bc 985f                      			CBI PORTD,7															; STEP 1 : Row 1 set to LOW
0000bd 9a5e                      			SBI PORTD,6
0000be 9a5d                      			SBI PORTD,5
0000bf 9a5c                      			SBI PORTD,4
0000c0 0000
0000c1 9b4b
0000c2 c032
0000c3 9b4a
0000c4 c02f
0000c5 9b49
0000c6 c02d
0000c7 9b48
0000c8 c02b
0000c9 c000                      			KEYBOARD_CHECK_COL BT7Pressed,OtherBut,OtherBut,OtherBut,row2_low
                                 		row2_low:																	
0000ca 9a5f                      			SBI PORTD,7															; STEP 2 : Row 2 set to LOW
0000cb 985e                      			CBI PORTD,6
0000cc 9a5d                      			SBI PORTD,5
0000cd 9a5c                      			SBI PORTD,4
0000ce 0000
0000cf 9b4b
0000d0 c02b
0000d1 9b4a
0000d2 c021
0000d3 9b49
0000d4 c01f
0000d5 9b48
0000d6 c01d
0000d7 c000                      			KEYBOARD_CHECK_COL BT4Pressed,OtherBut,OtherBut,OtherBut,row3_low
                                 		row3_low:
0000d8 9a5f                      			SBI PORTD,7															; STEP 3 : Row 3 set to LOW
0000d9 9a5e                      			SBI PORTD,6
0000da 985d                      			CBI PORTD,5
0000db 9a5c                      			SBI PORTD,4
0000dc 0000
0000dd 9b4b
0000de c024
0000df 9b4a
0000e0 c013
0000e1 9b49
0000e2 c011
0000e3 9b48
0000e4 c00f
0000e5 c000                      			KEYBOARD_CHECK_COL BT1Pressed,OtherBut,OtherBut,OtherBut,row4_low
                                 		row4_low:
0000e6 9a5f                      			SBI PORTD,7															; STEP 4 : Row 4 set to LOW
0000e7 9a5e                      			SBI PORTD,6
0000e8 9a5d                      			SBI PORTD,5
0000e9 985c                      			CBI PORTD,4
0000ea 0000
0000eb 9b4b
0000ec c01d
0000ed 9b4a
0000ee c005
0000ef 9b49
0000f0 c003
0000f1 9b48
0000f2 c001
0000f3 cfbf                      			KEYBOARD_CHECK_COL BTAPressed,OtherBut,OtherBut,OtherBut,waiting
                                 
                                 		OtherBut:
0000f4 cfbe                      			RJMP waiting
                                 		
                                 		BT7Pressed:
0000f5 ef2f                      			LDI R18,0xFF
0000f6 940e 0157                 			CALL FIRST_PART
0000f8 e0a1                      			LDI R26,0x01
0000f9 134a                      			CPSE R20,R26
0000fa c029                      			RJMP error
0000fb c015                      			RJMP correct
                                 
                                 
                                 		BT4Pressed:
0000fc ef2f                      			LDI R18,0xFF
0000fd 940e 0162                 			CALL SECOND_PART
0000ff e0a2                      			LDI R26,0x02
000100 134a                      			CPSE R20,R26
000101 c022                      			RJMP error
000102 c00e                      			RJMP correct	
                                 			
                                 
                                 		BT1Pressed:
000103 ef2f                      			LDI R18,0xFF
000104 940e 016f                 			CALL THIRD_PART
000106 e0a3                      			LDI R26,0x03
000107 134a                      			CPSE R20,R26
000108 c01b                      			RJMP error
000109 c007                      			RJMP correct
                                 
                                 		BTAPressed:
00010a ef2f                      			LDI R18,0xFF
00010b 940e 017c                 			CALL FOURTH_PART
00010d e0a4                      			LDI R26,0x04
00010e 134a                      			CPSE R20,R26
00010f c014                      			RJMP error
000110 c000                      			RJMP correct
                                 			
                                 		correct:
000111 ed7b                      			LDI R23,0xDB			; A5 (880 Hz) (FF - 16e6 / (256 * 880 * 2)) because complete period is 'buzzer on -> 
000112 940e 0150                 			CALL Buzzer_loop		; next time buzzer is on ----> corresponds to 2 overflows of timer 0
000114 e0af                      			LDI R26,0x0F 
000115 e0b8                      			LDI R27,0x08
000116 e3c0                      			LDI R28,0x30
000117 940e 0149                 			CALL Delay
000119 e090                      			LDI R25,0x00
00011a 9390 006e                 			STS TIMSK0,R25			; Disable interrpt for timer 0
00011c 940e 0187                 			CALL TURN_OFF
00011e e2a0                      			LDI R26,0x20
00011f e4b0                      			LDI R27,0x40
000120 e5c0                      			LDI R28,0x50
000121 940e 0149                 			CALL Delay
000123 c009                      			RJMP continue_game
                                 
                                 		error:
000124 e170                      			LDI R23,0x10			; 130.81 Hz (C3)
000125 940e 0150                 			CALL Buzzer_loop
000127 e1af                      			LDI R26,0x1F 
000128 e0b8                      			LDI R27,0x08
000129 e3c0                      			LDI R28,0x30
00012a 940e 0149                 			CALL Delay
00012c c31b                      			RJMP end
                                 		
                                 
                                 	continue_game:
00012d e0a1                      		LDI R26,0x01
00012e 13ae                      		CPSE R26,R30
00012f c001                      		RJMP continue_redo
000130 c002                      		RJMP stop_redo
                                 	
                                 	continue_redo:
000131 95ea                      		DEC R30
000132 cf7e                      		RJMP REDO_SEQ
                                 
                                 	stop_redo:
000133 9553                      		INC R21							; Increase score
000134 95f3                      		INC R31							; Increase sequence length
000135 2fd6                      		MOV R29,R22						; Seed for generation of random numbers
000136 2fef                      		MOV R30,R31	
                                 
000137 e8a0                      		LDI R26,0x80
000138 efbf                      		LDI R27,0xFF
000139 efcf                      		LDI R28,0xFF
00013a 940e 0149                 		CALL Delay
                                 
                                 .INCLUDE "OTHER_FUNCTIONS.inc"
00013c c306                      
                                  * OTHER_FUNCTIONS.inc
                                  *  - col_or_row_off
                                  *  - col_or_row_on
                                  *	- Delay
                                  *  - Buzzer_loop
                                  *  - FIRST_PART
                                  *  - SECOND_PART
                                  *  - THIRD_PART
                                  *  - FOURTH_PART
                                  *  - TURN_OFF
                                  *  - Delay1
                                  *  - EEPROM_READ
                                  *  - EEPROM_WRITE
                                  */ 
                                 
                                 
                                  
                                 col_or_row_off:			
00013d 982b                      	CBI PORTB,3
00013e 9a2d                      	SBI PORTB,5
00013f 982d                      	CBI PORTB,5
000140 95aa                      	DEC R26
000141 f7d9                      	BRNE col_or_row_off
000142 9508                      	RET
                                 
                                 col_or_row_on:		
000143 9a2b                      	SBI PORTB,3
000144 9a2d                      	SBI PORTB,5
000145 982d                      	CBI PORTB,5
000146 95aa                      	DEC R26
000147 f7d9                      	BRNE col_or_row_on
000148 9508                      	RET
                                 
                                 
                                 Delay:
                                 	loop1:
                                 		loop2:
                                 			loop3:
000149 95ca                      				DEC R28
00014a f7f1                      				BRNE loop3
00014b 95ba                      			DEC R27
00014c f7e1                      			BRNE loop2
00014d 95aa                      		DEC R26
00014e f7d1                      		BRNE loop1
00014f 9508                      	RET
                                 
                                 
                                 Buzzer_loop:
000150 e001                      	LDI R16,0x01
000151 9300 006e                 	STS TIMSK0,R16			; Enable interrupt for timer 0
000153 e004                      	LDI R16,0x04			; Prescaler 256
000154 bd05                      	OUT TCCR0B,R16 
000155 bd76                      	OUT TCNT0,R23			; TCNT init
000156 9508                      	RET
                                 	
                                 
                                 		
                                 FIRST_PART:
000157 e3ac                      	LDI R26,0x3C
000158 dfe4                      	RCALL col_or_row_off
000159 e1a4                      	LDI R26,0x14
00015a dfe8                      	RCALL col_or_row_on
00015b e0a8                      	LDI R26,0x08
00015c dfe6                      	RCALL col_or_row_on
00015d 9a2c                      	SBI PORTB,4
00015e 940e 0067                 	CALL pause
000160 982c                      	CBI PORTB,4
000161 9508                      	RET
                                 
                                 SECOND_PART:
000162 e2a8                      	LDI R26,0x28
000163 dfd9                      	RCALL col_or_row_off
000164 e1a4                      	LDI R26,0x14
000165 dfdd                      	RCALL col_or_row_on
000166 e1a4                      	LDI R26,0x14
000167 dfd5                      	RCALL col_or_row_off
000168 e0a8                      	LDI R26,0x08
000169 dfd9                      	RCALL col_or_row_on
00016a 9a2c                      	SBI PORTB,4
00016b 940e 0067                 	CALL pause
00016d 982c                      	CBI PORTB,4
00016e 9508                      	RET
                                 
                                 THIRD_PART:
00016f e1a4                      	LDI R26,0x14
000170 dfcc                      	RCALL col_or_row_off
000171 e1a4                      	LDI R26,0x14
000172 dfd0                      	RCALL col_or_row_on
000173 e2a8                      	LDI R26,0x28
000174 dfc8                      	RCALL col_or_row_off
000175 e0a8                      	LDI R26,0x08
000176 dfcc                      	RCALL col_or_row_on
000177 9a2c                      	SBI PORTB,4
000178 940e 0067                 	CALL pause
00017a 982c                      	CBI PORTB,4
00017b 9508                      	RET
                                 
                                 FOURTH_PART:
00017c e1a4                      	LDI R26,0x14
00017d dfc5                      	RCALL col_or_row_on
00017e e3ac                      	LDI R26,0x3C
00017f dfbd                      	RCALL col_or_row_off
000180 e0a8                      	LDI R26,0x08
000181 dfc1                      	RCALL col_or_row_on
000182 9a2c                      	SBI PORTB,4
000183 940e 0067                 	CALL pause
000185 982c                      	CBI PORTB,4
000186 9508                      	RET
                                 
                                 TURN_OFF:
000187 e5a8                      	LDI R26,0x58
000188 dfb4                      	RCALL col_or_row_off
000189 9a2c                      	SBI PORTB,4
00018a 940e 0067                 	CALL pause
00018c 982c                      	CBI PORTB,4
00018d 9508                      	RET
                                 	
                                 
                                 
                                 Delay1:
00018e 940e 0150                 	CALL Buzzer_loop
000190 e0a1                      	LDI R26,0x01 
000191 efbf                      	LDI R27,0xFF
                                 	loop11:
                                 		loop21:
000192 e000                      			LDI R16,0x00
000193 1380                      			CPSE R24,R16
000194 c001                      			RJMP curr
000195 c03e                      			RJMP besttt
                                 			curr:
000196 2f5d                      			MOV R21,R29
000197 e000
000198 1350
000199 c003
00019a e0fa
00019b e2ea
00019c c033
00019d e001
00019e 1350
00019f c003
0001a0 e0fa
0001a1 e7e0
0001a2 c02d
0001a3 e002
0001a4 1350
0001a5 c003
0001a6 e0fa
0001a7 ebe6
0001a8 c027
0001a9 e003
0001aa 1350
0001ab c003
0001ac e0fa
0001ad efec
0001ae c021
0001af e004
0001b0 1350
0001b1 c003
0001b2 e0fb
0001b3 e4e2
0001b4 c01b
0001b5 e005
0001b6 1350
0001b7 c003
0001b8 e0fb
0001b9 e8e8
0001ba c015
0001bb e006
0001bc 1350
0001bd c003
0001be e0fb
0001bf ecee
0001c0 c00f
0001c1 e007
0001c2 1350
0001c3 c003
0001c4 e0fc
0001c5 e1e4
0001c6 c009
0001c7 e008
0001c8 1350
0001c9 c003
0001ca e0fc
0001cb e5ea
0001cc c003
0001cd e0fc
0001ce eae0
0001cf c000
0001d0 940e 0043                 			MACRO_PRINT_SCORE score_zero,score_one,score_two,score_three,score_four,score_five,score_six,score_seven,score_eight,score_nine
0001d2 2f56                      			MOV R21,R22
0001d3 c03d                      			RJMP cont_score
                                 			besttt:
0001d4 2f53                      			MOV R21,R19
0001d5 e000
0001d6 1350
0001d7 c003
0001d8 e0ff
0001d9 eae2
0001da c033
0001db e001
0001dc 1350
0001dd c003
0001de e0ff
0001df eee8
0001e0 c02d
0001e1 e002
0001e2 1350
0001e3 c003
0001e4 e1f0
0001e5 e2ee
0001e6 c027
0001e7 e003
0001e8 1350
0001e9 c003
0001ea e1f0
0001eb e7e4
0001ec c021
0001ed e004
0001ee 1350
0001ef c003
0001f0 e1f0
0001f1 ebea
0001f2 c01b
0001f3 e005
0001f4 1350
0001f5 c003
0001f6 e1f1
0001f7 e0e0
0001f8 c015
0001f9 e006
0001fa 1350
0001fb c003
0001fc e1f1
0001fd e4e6
0001fe c00f
0001ff e007
000200 1350
000201 c003
000202 e1f1
000203 e8ec
000204 c009
000205 e008
000206 1350
000207 c003
000208 e1f1
000209 ede2
00020a c003
00020b e1f2
00020c e1e8
00020d c000
00020e 940e 0043                 			MACRO_PRINT_SCORE best_zero,best_one,best_two,best_three,best_four,best_five,best_six,best_seven,best_eight,best_nine
000210 2f54                      			MOV R21,R20
                                 			cont_score:
000211 e000
000212 1350
000213 c003
000214 e0fc
000215 eee6
000216 c033
000217 e001
000218 1350
000219 c003
00021a e0fd
00021b e2ec
00021c c02d
00021d e002
00021e 1350
00021f c003
000220 e0fd
000221 e7e2
000222 c027
000223 e003
000224 1350
000225 c003
000226 e0fd
000227 ebe8
000228 c021
000229 e004
00022a 1350
00022b c003
00022c e0fd
00022d efee
00022e c01b
00022f e005
000230 1350
000231 c003
000232 e0fe
000233 e4e4
000234 c015
000235 e006
000236 1350
000237 c003
000238 e0fe
000239 e8ea
00023a c00f
00023b e007
00023c 1350
00023d c003
00023e e0fe
00023f ede0
000240 c009
000241 e008
000242 1350
000243 c003
000244 e0ff
000245 e1e6
000246 c003
000247 e0ff
000248 e5ec
000249 c000
00024a 940e 0043                 			MACRO_PRINT_SCORE zero,one,two,three,four,five,six,seven,eight,nine
00024c 991a                      			SBIC PINB,2
00024d c001                      			RJMP NoJoy1
00024e c27b                      			RJMP Joy
                                 			NoJoy1:
00024f 95ba                      			DEC R27
000250 e000                      			LDI R16,0x00
000251 13b0                      			CPSE R27,R16
000252 cf3f                      			RJMP loop21
000253 95aa                      		DEC R26
000254 13a0                      		CPSE R26,R16
000255 cf3c                      		RJMP loop11
000256 9508                      	RET
                                 
                                 
                                 EEPROM_READ:
000257 99f9                      	SBIC EECR,1
000258 cffe                      	RJMP EEPROM_READ		; Wait until bit 1 of EECR is cleared (means previous write is completed)
000259 bd22                      	OUT EEARH,R18			; Address (R18:R17) is stored in the Address Registers High and Low
00025a bd11                      	OUT EEARL,R17
00025b 9af8                      	SBI EECR,0				; Set bit EEPROM Read Enable  -->  Start reading
00025c b5e0                      	IN R30,EEDR				; Store in R30 the readed data (contained in EEDR)
00025d 9508                      	RET
                                 
                                 
                                 EEPROM_WRITE:
00025e 99f9                      	SBIC EECR,1
00025f cffe                      	RJMP EEPROM_WRITE		; Wait until bit 1 of EECR is cleared (means previous write is completed)
000260 bd22                      	OUT EEARH,R18			; Address (R18:R17) is stored in the Address Registers High and Low
000261 bd11                      	OUT EEARL,R17
000262 bde0                      	OUT EEDR,R30			; Data from R30 are written to Data Register
000263 9afa                      	SBI EECR,2				; Set bit 2 of Control register	(needed so that next instruction effectively write)	
000264 9af9                      	SBI EECR,1				; Start EEPROM write
000265 9508                      	RET
                                 
                                 
                                 
                                 init1:
000266 e0c1                      	LDI R28,0x01
                                 
                                 /* WARNING : BEFORE BEGINNING THE GAME FOR THE FIRST TIME, TAKE CARE THE EEPROM IS SET TO ZERO AT ADDRESS 0x0000
                                 	;CLI
                                 	LDI R18,0x00
                                 	LDI R17,0x00
                                 	LDI R30,0x00
                                 	CALL EEPROM_WRITE
                                 	;SEI
                                 */
                                 
                                 
                                 
                                 /******************\
                                 |* INITIALIZATION *|
                                 \******************/
                                 
                                 init:
000267 940e 0021                 	CALL INITIALIZATION
000269 c000                      	RJMP start_screen
                                 
                                 
                                 /***********************************************************\
                                 |* START SCREEN : PRESS JOYSTICK TO START THE GAME + MUSIC *|
                                 \***********************************************************/
                                 
                                 start_screen:
                                 
00026a ea7f                      	LDI R23,0xAF								; TCNT_INIT for timer 0 --> Key G (4)
00026b 940e 0150
00026d e0a1
00026e e0b2
00026f e8c0
000270 e0f9
000271 eee4
000272 940e 0043
000274 991a
000275 c001
000276 c1bc
000277 95ca
000278 f7b9
000279 95ba
00027a f7a9
00027b 95aa
00027c f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
00027d ec70                      	LDI R23,0xC0								; Key B 
00027e 940e 0150
000280 e0a1
000281 e0b2
000282 e8c0
000283 e0f9
000284 eee4
000285 940e 0043
000287 991a
000288 c001
000289 c1a9
00028a 95ca
00028b f7b9
00028c 95ba
00028d f7a9
00028e 95aa
00028f f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
000290 e975                      	LDI R23,0x95								; Key D 
000291 940e 0150
000293 e0a1
000294 e0b2
000295 e8c0
000296 e0f9
000297 eee4
000298 940e 0043
00029a 991a
00029b c001
00029c c196
00029d 95ca
00029e f7b9
00029f 95ba
0002a0 f7a9
0002a1 95aa
0002a2 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
0002a3 e975                      	LDI R23,0x95								; Key D 
0002a4 940e 0150
0002a6 e0a1
0002a7 e0b2
0002a8 e8c0
0002a9 e1f2
0002aa e5ee
0002ab 940e 0043
0002ad 991a
0002ae c001
0002af c183
0002b0 95ca
0002b1 f7b9
0002b2 95ba
0002b3 f7a9
0002b4 95aa
0002b5 f799                      	DELAY_MACRO Joy_start,switch_sound
0002b6 ea7b                      	LDI R23,0xAB								; Key F#
0002b7 940e 0150
0002b9 e0a1
0002ba e0b2
0002bb e8c0
0002bc e1f2
0002bd e5ee
0002be 940e 0043
0002c0 991a
0002c1 c001
0002c2 c170
0002c3 95ca
0002c4 f7b9
0002c5 95ba
0002c6 f7a9
0002c7 95aa
0002c8 f799                      	DELAY_MACRO Joy_start,switch_sound
0002c9 eb78                      	LDI R23,0xB8								; Key A
0002ca 940e 0150
0002cc e0a1
0002cd e0b2
0002ce e8c0
0002cf e1f2
0002d0 e5ee
0002d1 940e 0043
0002d3 991a
0002d4 c001
0002d5 c15d
0002d6 95ca
0002d7 f7b9
0002d8 95ba
0002d9 f7a9
0002da 95aa
0002db f799                      	DELAY_MACRO Joy_start,switch_sound
0002dc ea70                      	LDI R23,0xA0								; Key E
0002dd 940e 0150
0002df e0a1
0002e0 e0b2
0002e1 e8c0
0002e2 e0f9
0002e3 eee4
0002e4 940e 0043
0002e6 991a
0002e7 c001
0002e8 c14a
0002e9 95ca
0002ea f7b9
0002eb 95ba
0002ec f7a9
0002ed 95aa
0002ee f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
0002ef ea7f                      	LDI R23,0xAF								; Key G
0002f0 940e 0150
0002f2 e0a1
0002f3 e0b2
0002f4 e8c0
0002f5 e0f9
0002f6 eee4
0002f7 940e 0043
0002f9 991a
0002fa c001
0002fb c137
0002fc 95ca
0002fd f7b9
0002fe 95ba
0002ff f7a9
000300 95aa
000301 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
000302 ec70                      	LDI R23,0xC0								; Key B
000303 940e 0150
000305 e0a1
000306 e0b2
000307 e8c0
000308 e0f9
000309 eee4
00030a 940e 0043
00030c 991a
00030d c001
00030e c124
00030f 95ca
000310 f7b9
000311 95ba
000312 f7a9
000313 95aa
000314 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
000315 ec70                      	LDI R23,0xC0								; Key B 
000316 940e 0150
000318 e0a1
000319 e0b2
00031a e8c0
00031b e1f2
00031c e5ee
00031d 940e 0043
00031f 991a
000320 c001
000321 c111
000322 95ca
000323 f7b9
000324 95ba
000325 f7a9
000326 95aa
000327 f799                      	DELAY_MACRO Joy_start,switch_sound
000328 e975                      	LDI R23,0x95								; Key D 
000329 940e 0150
00032b e0a1
00032c e0b2
00032d e8c0
00032e e1f2
00032f e5ee
000330 940e 0043
000332 991a
000333 c001
000334 c0fe
000335 95ca
000336 f7b9
000337 95ba
000338 f7a9
000339 95aa
00033a f799                      	DELAY_MACRO Joy_start,switch_sound
00033b ea7b                      	LDI R23,0xAB								; Key F#
00033c 940e 0150
00033e e0a1
00033f e0b2
000340 e8c0
000341 e1f2
000342 e5ee
000343 940e 0043
000345 991a
000346 c001
000347 c0eb
000348 95ca
000349 f7b9
00034a 95ba
00034b f7a9
00034c 95aa
00034d f799                      	DELAY_MACRO Joy_start,switch_sound
00034e e878                      	LDI R23,0x88								; Key C
00034f 940e 0150
000351 e0a1
000352 e0b2
000353 e8c0
000354 e0f9
000355 eee4
000356 940e 0043
000358 991a
000359 c001
00035a c0d8
00035b 95ca
00035c f7b9
00035d 95ba
00035e f7a9
00035f 95aa
000360 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
000361 ea70                      	LDI R23,0xA0								; Key E
000362 940e 0150
000364 e0a1
000365 e0b2
000366 e8c0
000367 e0f9
000368 eee4
000369 940e 0043
00036b 991a
00036c c001
00036d c0c5
00036e 95ca
00036f f7b9
000370 95ba
000371 f7a9
000372 95aa
000373 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
000374 ea7f                      	LDI R23,0xAF								; Key G
000375 940e 0150
000377 e0a1
000378 e0b2
000379 e8c0
00037a e0f9
00037b eee4
00037c 940e 0043
00037e 991a
00037f c001
000380 c0b2
000381 95ca
000382 f7b9
000383 95ba
000384 f7a9
000385 95aa
000386 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
000387 ea7f                      	LDI R23,0xAF								; Key G
000388 940e 0150
00038a e0a1
00038b e0b2
00038c e8c0
00038d e1f2
00038e e5ee
00038f 940e 0043
000391 991a
000392 c001
000393 c09f
000394 95ca
000395 f7b9
000396 95ba
000397 f7a9
000398 95aa
000399 f799                      	DELAY_MACRO Joy_start,switch_sound
00039a ec70                      	LDI R23,0xC0								; Key B
00039b 940e 0150
00039d e0a1
00039e e0b2
00039f e8c0
0003a0 e1f2
0003a1 e5ee
0003a2 940e 0043
0003a4 991a
0003a5 c001
0003a6 c08c
0003a7 95ca
0003a8 f7b9
0003a9 95ba
0003aa f7a9
0003ab 95aa
0003ac f799                      	DELAY_MACRO Joy_start,switch_sound
0003ad e975                      	LDI R23,0x95								; Key D
0003ae 940e 0150
0003b0 e0a1
0003b1 e0b2
0003b2 e8c0
0003b3 e1f2
0003b4 e5ee
0003b5 940e 0043
0003b7 991a
0003b8 c001
0003b9 c079
0003ba 95ca
0003bb f7b9
0003bc 95ba
0003bd f7a9
0003be 95aa
0003bf f799                      	DELAY_MACRO Joy_start,switch_sound
0003c0 e878                      	LDI R23,0x88								; Key C
0003c1 940e 0150
0003c3 e0a1
0003c4 e0b2
0003c5 e8c0
0003c6 e0f9
0003c7 eee4
0003c8 940e 0043
0003ca 991a
0003cb c001
0003cc c066
0003cd 95ca
0003ce f7b9
0003cf 95ba
0003d0 f7a9
0003d1 95aa
0003d2 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
0003d3 ea70                      	LDI R23,0xA0								; Key E
0003d4 940e 0150
0003d6 e0a1
0003d7 e0b2
0003d8 e8c0
0003d9 e0f9
0003da eee4
0003db 940e 0043
0003dd 991a
0003de c001
0003df c053
0003e0 95ca
0003e1 f7b9
0003e2 95ba
0003e3 f7a9
0003e4 95aa
0003e5 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
0003e6 ea7f                      	LDI R23,0xAF								; Key G
0003e7 940e 0150
0003e9 e0a1
0003ea e0b2
0003eb e8c0
0003ec e0f9
0003ed eee4
0003ee 940e 0043
0003f0 991a
0003f1 c001
0003f2 c040
0003f3 95ca
0003f4 f7b9
0003f5 95ba
0003f6 f7a9
0003f7 95aa
0003f8 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
0003f9 e975                      	LDI R23,0x95								; Key D
0003fa 940e 0150
0003fc e0a1
0003fd e0b2
0003fe e8c0
0003ff e1f2
000400 e5ee
000401 940e 0043
000403 991a
000404 c001
000405 c02d
000406 95ca
000407 f7b9
000408 95ba
000409 f7a9
00040a 95aa
00040b f799                      	DELAY_MACRO Joy_start,switch_sound
00040c ea7b                      	LDI R23,0xAB								; Key F#
00040d 940e 0150
00040f e0a1
000410 e0b2
000411 e8c0
000412 e1f2
000413 e5ee
000414 940e 0043
000416 991a
000417 c001
000418 c01a
000419 95ca
00041a f7b9
00041b 95ba
00041c f7a9
00041d 95aa
00041e f799                      	DELAY_MACRO Joy_start,switch_sound
00041f eb78                      	LDI R23,0xB8								; Key A
000420 940e 0150
000422 e0a1
000423 e0b2
000424 e8c0
000425 e1f2
000426 e5ee
000427 940e 0043
000429 991a
00042a c001
00042b c007
00042c 95ca
00042d f7b9
00042e 95ba
00042f f7a9
000430 95aa
000431 f799                      	DELAY_MACRO Joy_start,switch_sound
000432 ce37                      	RJMP start_screen
                                 
                                 	
                                 	Joy_start:
000433 94f8                      		CLI							; Stop timer (Global Interrupt Disable)
000434 9160 0084                 		LDS R22,TCNT1L				; Seed for generation of random numbers 
000436 9478                      		SEI							; (random as we use the time at which the user presses the joystick)
000437 e0a1                      		LDI R26,0x01
000438 13ca                      		CPSE R28,R26
000439 2f62                      		MOV R22,R18
00043a e090                      		LDI R25,0x00
00043b 9390 006e                 		STS TIMSK0,R25
00043d 2fd6                      		MOV R29,R22
00043e e0e0                      		LDI R30,0x00				; Counter for the sequence
00043f e0f1                      		LDI R31,0x01				; Length of the sequence
000440 e030                      		LDI R19,0x00				; For speed
000441 e050                      		LDI R21,0x00				; Score
000442 c000                      		RJMP main
                                 
                                 
                                 /*************************\
                                 |* MAIN LOOP OF THE GAME *|
                                 \*************************/
                                 
                                 main: 
                                 
000443 2fef                      	MOV R30,R31			; Counter for the sequence is equal to its length (increased every time the player succeeds)
                                 
                                 	; PART 1 : The screen is divided in four parts, that lit up randomly (only one part is lit up at one time)		
000444 940e 0081                 	CALL SEE_SEQ
                                 
                                 	; PART 2 : The user must reproduce the sequence. The game ends when the user makes an error, or when he does not do any action
                                 	; during 15	consecutive seconds
000446 940e 00b1                 	CALL REDO_SEQ
                                 
                                 
                                 /*******************\
                                 |* END OF THE GAME *|
                                 \*******************/
                                 
                                 end:
000448 e090                      	LDI R25,0x00
000449 9390 006e                 	STS TIMSK0,R25				; Disable interrpt for timer 0 (to stop error sound)
00044b 9829                      	CBI PORTB,1
                                 
00044c 94f8                      	CLI							; Disable all interrupts (to not interfer with reading operation of the EEPROM)
00044d e020                      	LDI R18,0x00
00044e e010                      	LDI R17,0x00
00044f 940e 0257                 	CALL EEPROM_READ			; Load the stored highest score	(in R30) from the EEPROM (non-volatile memory)
000451 9478                      	SEI
                                 					
000452 175e                      	CP R21,R30					; Compare stored high score to current score (R21)
000453 f40c                      	BRGE newHighScore			;  Branch if R21 >= R30 (unsigned)
000454 c007                      	RJMP end_s
                                 
                                 	newHighScore:
000455 2fe5                      		MOV R30,R21
000456 94f8                      		CLI
000457 e020                      		LDI R18,0x00
000458 e010                      		LDI R17,0x00
000459 940e 025e                 		CALL EEPROM_WRITE		; Write in EEPROM the new best score
00045b 9478                      		SEI
                                 		
                                 
                                 
                                 end_s:
00045c e6a4
00045d 175a
00045e f484
00045f e0d0
000460 e02a
000461 e0ba
000462 1752
000463 f018
000464 0f2b
000465 95d3
000466 f7d9
000467 1b2b
000468 1b52
000469 e060
00046a 1356
00046b c001
00046c c005
00046d 9563
00046e f7d9
00046f e0d9
000470 e069
000471 c000                      	FIND_SCORES R21,R29,R22		; Find out the ten and unit of current score, in order to print it
000472 e6a4
000473 17ea
000474 f484
000475 e030
000476 e02a
000477 e0ba
000478 17e2
000479 f018
00047a 0f2b
00047b 9533
00047c f7d9
00047d 1b2b
00047e 1be2
00047f e040
000480 13e4
000481 c001
000482 c005
000483 9543
000484 f7d9
000485 e039
000486 e049
000487 c000                      	FIND_SCORES R30,R19,R20		; Find out the ten and unit of best score, in order to print it
000488 94f8                      	CLI							; Stop timer (Global Interrupt Disable)
000489 9120 0084                 	LDS R18,TCNT1L				; Seed for generation of random numbers for the next game 
00048b 9478                      	SEI							; Global enable interrupt
00048c e090                      	LDI R25,0x00
00048d 9390 006f                 	STS TIMSK1,R25				; Disable interrupt for timer 1
                                 
                                 
                                 /******************************************************************************\
                                 |* END SCREEN : SCORE + BEST SCORE + PRESS JOYSTICK TO START THE GAME + MUSIC *|
                                 \******************************************************************************/
                                 			
                                 end_screen:
                                 
                                 	; Alternatively print the score, the best score and the text "Press JS to start"
                                 	; Plus: melody
00048f e081                      	LDI R24,0x01
000490 ea75                      	LDI R23,0xA5							; Key F (4)	 	
000491 940e 018e                 	CALL Delay1
000493 eb78                      	LDI R23,0xB8							; Key A#			 	
000494 940e 018e                 	CALL Delay1
000496 e87e                      	LDI R23,0x8E							; Key C#		 
000497 940e 018e                 	CALL Delay1
000499 e080                      	LDI R24,0x00
00049a ea75                      	LDI R23,0xA5							; Key F		 	
00049b 940e 018e                 	CALL Delay1
00049d e878                      	LDI R23,0x88							; Key C			 
00049e 940e 018e                 	CALL Delay1
0004a0 e97b                      	LDI R23,0x9B							; Key D#			 
0004a1 940e 018e                 	CALL Delay1
0004a3 ea7f                      	LDI R23,0xAF							; Key G			 	
0004a4 940e 0150
0004a6 e0a1
0004a7 e0b2
0004a8 e8c0
0004a9 e0f9
0004aa eee4
0004ab 940e 0043
0004ad 991a
0004ae c001
0004af c01a
0004b0 95ca
0004b1 f7b9
0004b2 95ba
0004b3 f7a9
0004b4 95aa
0004b5 f799                      	DELAY_MACRO Joy,Press_JS_to_start
0004b6 ea7b                      	LDI R23,0xAB							; Key F#		 		
0004b7 940e 0150
0004b9 e0a1
0004ba e0b2
0004bb e8c0
0004bc e0f9
0004bd eee4
0004be 940e 0043
0004c0 991a
0004c1 c001
0004c2 c007
0004c3 95ca
0004c4 f7b9
0004c5 95ba
0004c6 f7a9
0004c7 95aa
0004c8 f799                      	DELAY_MACRO Joy,Press_JS_to_start
                                 
0004c9 cfc5                      	RJMP end_screen
                                 
                                 	
                                 Joy:
0004ca e090                      	LDI R25,0x00
0004cb 9390 006e                 	STS TIMSK0,R25			; Disable interrupt for timer 0
0004cd cd99                      	RJMP init
                                 
                                 
                                 
                                 
                                 /*****************************\
                                 |* TIMER INTERRUPT'S ACTIONS *|
                                 \*****************************/
                                 
                                 Timer0OverflowInterrupt:
                                 	; Used for the buzzer
                                 	; If switch is low : no sound
0004ce bd76                      	OUT TCNT0,R23				; TCNTinit
0004cf 9918                      	SBIC PINB,0					; Skip next instruction if bit 0 of pinB is cleared
0004d0 c004                      	RJMP switchHigh				
                                 	switchLow:
0004d1 e070                      		LDI R23,0x00
0004d2 9370 006e                 		STS TIMSK0,R23
0004d4 9518                      		RETI
                                 	switchHigh:
0004d5 9a19                      		SBI PINB,1					; invert output of buzzer
0004d6 9518                      		RETI
                                 	
                                 
                                 Timer1OverflowInterrupt:
                                 	; Used to increase the speed during the game, and to check for user inactivity
                                 	; Plus, at the beginning, to get a random seed
0004d7 939f                      	PUSH R25
0004d8 937f                      	PUSH R23
0004d9 e875                      	LDI R23,0x85                ; TCNTinit (2 Hz) 
0004da ee9d                      	LDI R25,0xED					
0004db 9370 0085                 	STS TCNT1H,R23					
0004dd 9390 0084                 	STS TCNT1L,R25 
                                 	
0004df ef9f                      	LDI R25,0xFF
0004e0 1329                      	CPSE R18,R25
0004e1 c003                      	RJMP wait_state
0004e2 c000                      	RJMP button_pressed
                                 
                                 	button_pressed:
0004e3 e080                      		LDI R24,0x00
0004e4 c002                      		RJMP continue
                                 
                                 	wait_state:
0004e5 9583                      		INC R24
0004e6 c000                      		RJMP continue
                                 
                                 	continue:
0004e7 e490                      	LDI R25,0x40
0004e8 1339                      	CPSE R19,R25
0004e9 c001                      	RJMP inc_speed
0004ea c004                      	RJMP max_speed
                                 	inc_speed:
0004eb 9533                      		INC R19
0004ec 917f                      		POP R23
0004ed 919f                      		POP R25
0004ee 9518                      		RETI
                                 	max_speed:
0004ef 917f                      		POP R23
0004f0 919f                      		POP R25
0004f1 9518                      		RETI
                                 
                                 
                                 
                                 /******************\
                                 |* PROGRAM MEMORY *|
                                 \******************/
                                 
                                 ; Used to store the different texts to print on the screen : 1 -> column ON / 0 -> column OFF
                                 ; /!\ First line -> last row (the 7st) 
                                 ; /!\ On a given line, first number -> last column  
                                 
                                 Press_js_to_start:   ;.db = define byte / program memory	
0004f2 5222
0004f3 0043
0004f4 30c4
0004f5 6380
0004f6 213d                      	.db 0b00100010, 0b01010010, 0b01000011, 0b00000000, 0b11000100, 0b00110000, 0b10000000, 0b01100011, 0b00111101, 0b00100001
0004f7 5221
0004f8 8144
0004f9 4924
0004fa 9440
0004fb a184                      	.db 0b00100001, 0b01010010, 0b01000100, 0b10000001, 0b00100100, 0b01001001, 0b01000000, 0b10010100, 0b10000100, 0b10100001
0004fc d220
0004fd 0144
0004fe 4124
0004ff 8400
000500 6104                      	.db 0b00100000, 0b11010010, 0b01000100, 0b00000001, 0b00100100, 0b01000001, 0b00000000, 0b10000100, 0b00000100, 0b01100001
000501 de21
000502 0143
000503 3124
000504 6300
000505 e71c                      	.db 0b00100001, 0b11011110, 0b01000011, 0b00000001, 0b00100100, 0b00110001, 0b00000000, 0b01100011, 0b00011100, 0b11100111
000506 5222
000507 8140
000508 0924
000509 1000
00050a 2985                      	.db 0b00100010, 0b01010010, 0b01000000, 0b10000001, 0b00100100, 0b00001001, 0b00000000, 0b00010000, 0b10000101, 0b00101001
00050b 5222
00050c 8144
00050d 4924
00050e 9400
00050f 2985                      	.db 0b00100010, 0b01010010, 0b01000100, 0b10000001, 0b00100100, 0b01001001, 0b00000000, 0b10010100, 0b10000101, 0b00101001
000510 cc79
000511 00f3
000512 33cf
000513 63c0
000514 e73c                      	.db 0b01111001, 0b11001100, 0b11110011, 0b00000000, 0b11001111, 0b00110011, 0b11000000, 0b01100011, 0b00111100, 0b11100111
                                 
                                 score_zero:	
000515 0000
000516 0003
000517 0300
000518 66d2
000519 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
00051a 0000
00051b 8004
00051c 0000
00051d 914a
00051e 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
00051f 0000
000520 8004
000521 0000
000522 9046
000523 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
000524 0000
000525 8004
000526 0100
000527 90ce
000528 0098                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
000529 0000
00052a 8004
00052b 0000
00052c 9052
00052d 0084                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
00052e 0000
00052f 8004
000530 0000
000531 9152
000532 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
000533 0000
000534 0003
000535 0300
000536 66ce
000537 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 score_one:
000538 0000
000539 0004
00053a 0300
00053b 66d2
00053c 0018                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
00053d 0000
00053e 0004
00053f 0000
000540 914a
000541 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
000542 0000
000543 0004
000544 0000
000545 9046
000546 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
000547 0000
000548 0004
000549 0100
00054a 90ce
00054b 0098                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
00054c 0000
00054d 0005
00054e 0000
00054f 9052
000550 0084                      	.db 0b00000000, 0b00000000, 0b00000101, 0b00000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
000551 0000
000552 0006
000553 0000
000554 9152
000555 0024                      	.db 0b00000000, 0b00000000, 0b00000110, 0b00000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
000556 0000
000557 0004
000558 0300
000559 66ce
00055a 0018                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 score_two:
00055b 0000
00055c 8007
00055d 0300
00055e 66d2
00055f 0018                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
000560 0000
000561 8000
000562 0000
000563 914a
000564 0024                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
000565 0000
000566 0001
000567 0000
000568 9046
000569 00a0                      	.db 0b00000000, 0b00000000, 0b00000001, 0b00000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
00056a 0000
00056b 0002
00056c 0100
00056d 90ce
00056e 0098                      	.db 0b00000000, 0b00000000, 0b00000010, 0b00000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
00056f 0000
000570 0004
000571 0000
000572 9052
000573 0084                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
000574 0000
000575 8004
000576 0000
000577 9152
000578 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
000579 0000
00057a 0003
00057b 0300
00057c 66ce
00057d 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 score_three: 
00057e 0000
00057f 0003
000580 0300
000581 66d2
000582 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
000583 0000
000584 8004
000585 0000
000586 914a
000587 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
000588 0000
000589 0004
00058a 0000
00058b 9046
00058c 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
00058d 0000
00058e 0003
00058f 0100
000590 90ce
000591 0098                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
000592 0000
000593 0004
000594 0000
000595 9052
000596 0084                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
000597 0000
000598 8004
000599 0000
00059a 9152
00059b 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
00059c 0000
00059d 0003
00059e 0300
00059f 66ce
0005a0 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 score_four: 
0005a1 0000
0005a2 0004
0005a3 0300
0005a4 66d2
0005a5 0018                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
0005a6 0000
0005a7 0004
0005a8 0000
0005a9 914a
0005aa 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
0005ab 0000
0005ac 0004
0005ad 0000
0005ae 9046
0005af 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
0005b0 0000
0005b1 8007
0005b2 0100
0005b3 90ce
0005b4 0098                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
0005b5 0000
0005b6 8004
0005b7 0000
0005b8 9052
0005b9 0084                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
0005ba 0000
0005bb 8004
0005bc 0000
0005bd 9152
0005be 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
0005bf 0000
0005c0 8004
0005c1 0300
0005c2 66ce
0005c3 0018                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 score_five: 
0005c4 0000
0005c5 0003
0005c6 0300
0005c7 66d2
0005c8 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
0005c9 0000
0005ca 8004
0005cb 0000
0005cc 914a
0005cd 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
0005ce 0000
0005cf 0004
0005d0 0000
0005d1 9046
0005d2 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
0005d3 0000
0005d4 8003
0005d5 0100
0005d6 90ce
0005d7 0098                      	.db 0b00000000, 0b00000000, 0b00000011, 0b10000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
0005d8 0000
0005d9 8000
0005da 0000
0005db 9052
0005dc 0084                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
0005dd 0000
0005de 8000
0005df 0000
0005e0 9152
0005e1 0024                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
0005e2 0000
0005e3 8007
0005e4 0300
0005e5 66ce
0005e6 0018                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 	
                                 score_six: 	
0005e7 0000
0005e8 0003
0005e9 0300
0005ea 66d2
0005eb 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
0005ec 0000
0005ed 8004
0005ee 0000
0005ef 914a
0005f0 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
0005f1 0000
0005f2 8004
0005f3 0000
0005f4 9046
0005f5 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
0005f6 0000
0005f7 8003
0005f8 0100
0005f9 90ce
0005fa 0098                      	.db 0b00000000, 0b00000000, 0b00000011, 0b10000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
0005fb 0000
0005fc 8000
0005fd 0000
0005fe 9052
0005ff 0084                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
000600 0000
000601 8004
000602 0000
000603 9152
000604 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
000605 0000
000606 0003
000607 0300
000608 66ce
000609 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 	
                                 score_seven: 
00060a 0000
00060b 0004
00060c 0300
00060d 66d2
00060e 0018                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
00060f 0000
000610 0004
000611 0000
000612 914a
000613 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
000614 0000
000615 0004
000616 0000
000617 9046
000618 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
000619 0000
00061a 0006
00061b 0100
00061c 90ce
00061d 0098                      	.db 0b00000000, 0b00000000, 0b00000110, 0b00000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
00061e 0000
00061f 0004
000620 0000
000621 9052
000622 0084                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
000623 0000
000624 8004
000625 0000
000626 9152
000627 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
000628 0000
000629 8007
00062a 0300
00062b 66ce
00062c 0018                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 score_eight: 
00062d 0000
00062e 0003
00062f 0300
000630 66d2
000631 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
000632 0000
000633 8004
000634 0000
000635 914a
000636 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
000637 0000
000638 8004
000639 0000
00063a 9046
00063b 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
00063c 0000
00063d 0003
00063e 0100
00063f 90ce
000640 0098                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
000641 0000
000642 8004
000643 0000
000644 9052
000645 0084                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
000646 0000
000647 8004
000648 0000
000649 9152
00064a 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
00064b 0000
00064c 0003
00064d 0300
00064e 66ce
00064f 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 score_nine: 
000650 0000
000651 0003
000652 0300
000653 66d2
000654 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
000655 0000
000656 8004
000657 0000
000658 914a
000659 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
00065a 0000
00065b 0004
00065c 0000
00065d 9046
00065e 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
00065f 0000
000660 0007
000661 0100
000662 90ce
000663 0098                      	.db 0b00000000, 0b00000000, 0b00000111, 0b00000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
000664 0000
000665 8004
000666 0000
000667 9052
000668 0084                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
000669 0000
00066a 8004
00066b 0000
00066c 9152
00066d 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
00066e 0000
00066f 0003
000670 0300
000671 66ce
000672 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 zero:	
000673 0000
000674 0060
000675 0000
000676 0000
000677 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000678 0000
000679 0090
00067a 0000
00067b 0000
00067c 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00067d 0000
00067e 0090
00067f 0000
000680 0000
000681 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000682 0000
000683 0090
000684 0000
000685 0000
000686 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000687 0000
000688 0090
000689 0000
00068a 0000
00068b 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00068c 0000
00068d 0090
00068e 0000
00068f 0000
000690 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000691 0000
000692 0060
000693 0000
000694 0000
000695 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 one:
000696 0000
000697 0040
000698 0000
000699 0000
00069a 0000                      	.db 0b00000000, 0b00000000, 0b1000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00069b 0000
00069c 0040
00069d 0000
00069e 0000
00069f 0000                      	.db 0b00000000, 0b00000000, 0b1000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006a0 0000
0006a1 0040
0006a2 0000
0006a3 0000
0006a4 0000                      	.db 0b00000000, 0b00000000, 0b1000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006a5 0000
0006a6 0040
0006a7 0000
0006a8 0000
0006a9 0000                      	.db 0b00000000, 0b00000000, 0b1000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006aa 0000
0006ab 0050
0006ac 0000
0006ad 0000
0006ae 0000                      	.db 0b00000000, 0b00000000, 0b1010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006af 0000
0006b0 0060
0006b1 0000
0006b2 0000
0006b3 0000                      	.db 0b00000000, 0b00000000, 0b1100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006b4 0000
0006b5 0040
0006b6 0000
0006b7 0000
0006b8 0000                      	.db 0b00000000, 0b00000000, 0b1000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 two:	
0006b9 0000
0006ba 00f0
0006bb 0000
0006bc 0000
0006bd 0000                      	.db 0b00000000, 0b00000000, 0b11110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006be 0000
0006bf 0010
0006c0 0000
0006c1 0000
0006c2 0000                      	.db 0b00000000, 0b00000000, 0b00010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006c3 0000
0006c4 0020
0006c5 0000
0006c6 0000
0006c7 0000                      	.db 0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006c8 0000
0006c9 0040
0006ca 0000
0006cb 0000
0006cc 0000                      	.db 0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006cd 0000
0006ce 0080
0006cf 0000
0006d0 0000
0006d1 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006d2 0000
0006d3 0090
0006d4 0000
0006d5 0000
0006d6 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006d7 0000
0006d8 0060
0006d9 0000
0006da 0000
0006db 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 three:	
0006dc 0000
0006dd 0060
0006de 0000
0006df 0000
0006e0 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006e1 0000
0006e2 0090
0006e3 0000
0006e4 0000
0006e5 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006e6 0000
0006e7 0080
0006e8 0000
0006e9 0000
0006ea 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006eb 0000
0006ec 0060
0006ed 0000
0006ee 0000
0006ef 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006f0 0000
0006f1 0080
0006f2 0000
0006f3 0000
0006f4 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006f5 0000
0006f6 0090
0006f7 0000
0006f8 0000
0006f9 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006fa 0000
0006fb 0060
0006fc 0000
0006fd 0000
0006fe 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 four:	
0006ff 0000
000700 0080
000701 0000
000702 0000
000703 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000704 0000
000705 0080
000706 0000
000707 0000
000708 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000709 0000
00070a 0080
00070b 0000
00070c 0000
00070d 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00070e 0000
00070f 00f0
000710 0000
000711 0000
000712 0000                      	.db 0b00000000, 0b00000000, 0b11110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000713 0000
000714 0090
000715 0000
000716 0000
000717 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000718 0000
000719 0090
00071a 0000
00071b 0000
00071c 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00071d 0000
00071e 0090
00071f 0000
000720 0000
000721 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 five:	
000722 0000
000723 0060
000724 0000
000725 0000
000726 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000727 0000
000728 0090
000729 0000
00072a 0000
00072b 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00072c 0000
00072d 0080
00072e 0000
00072f 0000
000730 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000731 0000
000732 0070
000733 0000
000734 0000
000735 0000                      	.db 0b00000000, 0b00000000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000736 0000
000737 0010
000738 0000
000739 0000
00073a 0000                      	.db 0b00000000, 0b00000000, 0b00010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00073b 0000
00073c 0010
00073d 0000
00073e 0000
00073f 0000                      	.db 0b00000000, 0b00000000, 0b00010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000740 0000
000741 00f0
000742 0000
000743 0000
000744 0000                      	.db 0b00000000, 0b00000000, 0b11110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 six:	
000745 0000
000746 0060
000747 0000
000748 0000
000749 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00074a 0000
00074b 0090
00074c 0000
00074d 0000
00074e 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00074f 0000
000750 0090
000751 0000
000752 0000
000753 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000754 0000
000755 0070
000756 0000
000757 0000
000758 0000                      	.db 0b00000000, 0b00000000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000759 0000
00075a 0010
00075b 0000
00075c 0000
00075d 0000                      	.db 0b00000000, 0b00000000, 0b00010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00075e 0000
00075f 0090
000760 0000
000761 0000
000762 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000763 0000
000764 0060
000765 0000
000766 0000
000767 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 seven:
000768 0000
000769 0080
00076a 0000
00076b 0000
00076c 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00076d 0000
00076e 0080
00076f 0000
000770 0000
000771 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000772 0000
000773 0080
000774 0000
000775 0000
000776 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000777 0000
000778 00c0
000779 0000
00077a 0000
00077b 0000                      	.db 0b00000000, 0b00000000, 0b11000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00077c 0000
00077d 0080
00077e 0000
00077f 0000
000780 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000781 0000
000782 0090
000783 0000
000784 0000
000785 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000786 0000
000787 00f0
000788 0000
000789 0000
00078a 0000                      	.db 0b00000000, 0b00000000, 0b11110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 eight:	
00078b 0000
00078c 0060
00078d 0000
00078e 0000
00078f 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000790 0000
000791 0090
000792 0000
000793 0000
000794 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000795 0000
000796 0090
000797 0000
000798 0000
000799 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00079a 0000
00079b 0060
00079c 0000
00079d 0000
00079e 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00079f 0000
0007a0 0090
0007a1 0000
0007a2 0000
0007a3 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007a4 0000
0007a5 0090
0007a6 0000
0007a7 0000
0007a8 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007a9 0000
0007aa 0060
0007ab 0000
0007ac 0000
0007ad 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 nine:	
0007ae 0000
0007af 0060
0007b0 0000
0007b1 0000
0007b2 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007b3 0000
0007b4 0090
0007b5 0000
0007b6 0000
0007b7 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007b8 0000
0007b9 0080
0007ba 0000
0007bb 0000
0007bc 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007bd 0000
0007be 00e0
0007bf 0000
0007c0 0000
0007c1 0000                      	.db 0b00000000, 0b00000000, 0b11100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007c2 0000
0007c3 0090
0007c4 0000
0007c5 0000
0007c6 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007c7 0000
0007c8 0090
0007c9 0000
0007ca 0000
0007cb 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007cc 0000
0007cd 0060
0007ce 0000
0007cf 0000
0007d0 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 best_zero:	
0007d1 0000
0007d2 0003
0007d3 0000
0007d4 6708
0007d5 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
0007d6 0000
0007d7 8004
0007d8 0000
0007d9 9008
0007da 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0007db 0000
0007dc 8004
0007dd 0000
0007de 8008
0007df 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
0007e0 0000
0007e1 8004
0007e2 0000
0007e3 6308
0007e4 009c                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
0007e5 0000
0007e6 8004
0007e7 0000
0007e8 1008
0007e9 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
0007ea 0000
0007eb 8004
0007ec 0000
0007ed 9008
0007ee 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0007ef 0000
0007f0 0003
0007f1 0000
0007f2 671e
0007f3 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_one:
0007f4 0000
0007f5 0004
0007f6 0000
0007f7 6708
0007f8 009c                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
0007f9 0000
0007fa 0004
0007fb 0000
0007fc 9008
0007fd 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0007fe 0000
0007ff 0004
000800 0000
000801 8008
000802 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
000803 0000
000804 0004
000805 0000
000806 6308
000807 009c                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
000808 0000
000809 0005
00080a 0000
00080b 1008
00080c 00a4                      	.db 0b00000000, 0b00000000, 0b00000101, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
00080d 0000
00080e 0006
00080f 0000
000810 9008
000811 00a4                      	.db 0b00000000, 0b00000000, 0b00000110, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
000812 0000
000813 0004
000814 0000
000815 671e
000816 009c                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_two:
000817 0000
000818 8007
000819 0000
00081a 6708
00081b 009c                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
00081c 0000
00081d 8000
00081e 0000
00081f 9008
000820 00a4                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
000821 0000
000822 0001
000823 0000
000824 8008
000825 00a4                      	.db 0b00000000, 0b00000000, 0b00000001, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
000826 0000
000827 0002
000828 0000
000829 6308
00082a 009c                      	.db 0b00000000, 0b00000000, 0b00000010, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
00082b 0000
00082c 0004
00082d 0000
00082e 1008
00082f 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
000830 0000
000831 8004
000832 0000
000833 9008
000834 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
000835 0000
000836 0003
000837 0000
000838 671e
000839 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_three:
00083a 0000
00083b 0003
00083c 0000
00083d 6708
00083e 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
00083f 0000
000840 8004
000841 0000
000842 9008
000843 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
000844 0000
000845 0004
000846 0000
000847 8008
000848 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
000849 0000
00084a 0003
00084b 0000
00084c 6308
00084d 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
00084e 0000
00084f 0004
000850 0000
000851 1008
000852 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
000853 0000
000854 8004
000855 0000
000856 9008
000857 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
000858 0000
000859 0003
00085a 0000
00085b 671e
00085c 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_four:
00085d 0000
00085e 0004
00085f 0000
000860 6708
000861 009c                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
000862 0000
000863 0004
000864 0000
000865 9008
000866 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
000867 0000
000868 0004
000869 0000
00086a 8008
00086b 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
00086c 0000
00086d 8007
00086e 0000
00086f 6308
000870 009c                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
000871 0000
000872 8004
000873 0000
000874 1008
000875 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
000876 0000
000877 8004
000878 0000
000879 9008
00087a 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
00087b 0000
00087c 8004
00087d 0000
00087e 671e
00087f 009c                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_five:	
000880 0000
000881 0003
000882 0000
000883 6708
000884 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
000885 0000
000886 8004
000887 0000
000888 9008
000889 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
00088a 0000
00088b 0004
00088c 0000
00088d 8008
00088e 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
00088f 0000
000890 8003
000891 0000
000892 6308
000893 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
000894 0000
000895 8000
000896 0000
000897 1008
000898 00a4                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
000899 0000
00089a 8000
00089b 0000
00089c 9008
00089d 00a4                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
00089e 0000
00089f 8007
0008a0 0000
0008a1 671e
0008a2 009c                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_six:	
0008a3 0000
0008a4 0003
0008a5 0000
0008a6 6708
0008a7 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
0008a8 0000
0008a9 8004
0008aa 0000
0008ab 9008
0008ac 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0008ad 0000
0008ae 8004
0008af 0000
0008b0 8008
0008b1 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
0008b2 0000
0008b3 8003
0008b4 0000
0008b5 6308
0008b6 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
0008b7 0000
0008b8 8000
0008b9 0000
0008ba 1008
0008bb 00a4                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
0008bc 0000
0008bd 8004
0008be 0000
0008bf 9008
0008c0 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0008c1 0000
0008c2 0003
0008c3 0000
0008c4 671e
0008c5 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_seven:
0008c6 0000
0008c7 0004
0008c8 0000
0008c9 6708
0008ca 009c                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
0008cb 0000
0008cc 0004
0008cd 0000
0008ce 9008
0008cf 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0008d0 0000
0008d1 0004
0008d2 0000
0008d3 8008
0008d4 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
0008d5 0000
0008d6 0006
0008d7 0000
0008d8 6308
0008d9 009c                      	.db 0b00000000, 0b00000000, 0b00000110, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
0008da 0000
0008db 0004
0008dc 0000
0008dd 1008
0008de 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
0008df 0000
0008e0 8004
0008e1 0000
0008e2 9008
0008e3 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0008e4 0000
0008e5 8007
0008e6 0000
0008e7 671e
0008e8 009c                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_eight:
0008e9 0000
0008ea 0003
0008eb 0000
0008ec 6708
0008ed 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
0008ee 0000
0008ef 8004
0008f0 0000
0008f1 9008
0008f2 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0008f3 0000
0008f4 8004
0008f5 0000
0008f6 8008
0008f7 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
0008f8 0000
0008f9 0003
0008fa 0000
0008fb 6308
0008fc 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
0008fd 0000
0008fe 8004
0008ff 0000
000900 1008
000901 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
000902 0000
000903 8004
000904 0000
000905 9008
000906 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
000907 0000
000908 0003
000909 0000
00090a 671e
00090b 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_nine:	
00090c 0000
00090d 0003
00090e 0000
00090f 6708
000910 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
000911 0000
000912 8004
000913 0000
000914 9008
000915 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
000916 0000
000917 0004
000918 0000
000919 8008
00091a 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
00091b 0000
00091c 0007
00091d 0000
00091e 6308
00091f 009c                      	.db 0b00000000, 0b00000000, 0b00000111, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
000920 0000
000921 8004
000922 0000
000923 1008
000924 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
000925 0000
000926 8004
000927 0000
000928 9008
000929 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
00092a 0000
00092b 0003
00092c 0000
00092d 671e
00092e 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 switch_sound:
00092f 4c1a
000930 0063
000931 02c9
000932 f04c
000933 c024                      	.db 0b00011010, 0b01001100, 0b01100011, 0b00000000, 0b11001001, 0b00000010, 0b01001100, 0b11110000, 0b00100100, 0b11000000
000934 522a
000935 8194
000936 0329
000937 10d2
000938 203d                      	.db 0b00101010, 0b01010010, 0b10010100, 0b10000001, 0b00101001, 0b00000011, 0b11010010, 0b00010000, 0b00111101, 0b00100000
000939 524a
00093a 0194
00093b 0229
00093c 1052
00093d 0025                      	.db 0b01001010, 0b01010010, 0b10010100, 0b00000001, 0b00101001, 0b00000010, 0b01010010, 0b00010000, 0b00100101, 0b00000000
00093e 524a
00093f 0193
000940 0229
000941 1052
000942 c024                      	.db 0b01001010, 0b01010010, 0b10010011, 0b00000001, 0b00101001, 0b00000010, 0b01010010, 0b00010000, 0b00100100, 0b11000000
000943 524b
000944 8190
000945 022d
000946 1052
000947 2024                      	.db 0b01001011, 0b01010010, 0b10010000, 0b10000001, 0b00101101, 0b00000010, 0b01010010, 0b00010000, 0b00100100, 0b00100000
000948 d22a
000949 8194
00094a 022b
00094b 1052
00094c 2025                      	.db 0b00101010, 0b11010010, 0b10010100, 0b10000001, 0b00101011, 0b00000010, 0b01010010, 0b00010000, 0b00100101, 0b00100000
00094d 521a
00094e 0063
00094f 02c9
000950 104c
000951 c024                      	.db 0b00011010, 0b01010010, 0b01100011, 0b00000000, 0b11001001, 0b00000010, 0b01001100, 0b00010000, 0b00100100, 0b11000000
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   1 r0 :   1 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  74 r17:  15 r18:  22 r19:   8 r20:  19 
r21:  39 r22:  10 r23:  43 r24:   7 r25:  21 r26: 118 r27:  76 r28:  61 
r29:   9 r30:  72 r31:  61 
Registers used: 18 out of 35 (51.4%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   3 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   3 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 brlt  :   0 brmi  :   0 
brne  :  93 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  93 cbi   :  18 cbr   :   2 
clc   :   0 clh   :   0 cli   :   4 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   5 cpc   :   0 
cpi   :   0 cpse  :  45 dec   :  92 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   9 jmp   :   0 
ld    :   0 ldd   :   0 ldi   : 358 lds   :   2 lpm   :   1 lsl   :   1 
lsr   :   4 mov   :  15 movw  :   1 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   4 or    :   0 ori   :   0 out   :   9 pop   :   7 
push  :   5 rcall :  20 ret   :  20 reti  :   4 rjmp  : 190 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  44 sbic  :  30 sbis  :  16 
sbiw  :   0 sbr   :   0 sbrc  :   1 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   5 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  14 
sub   :   5 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 36 out of 113 (31.9%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0012a4   2472   2240   4712   32768  14.4%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
