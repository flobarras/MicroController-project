
AVRASM ver. 2.2.7  C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm Sat Aug 25 00:36:53 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(169): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\INITIALIZATION.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(170): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\SCREEN_PRINT_LOOP.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(171): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\RANDOM_NUM.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(172): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\SEE_SEQ.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(173): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\REDO_SEQ.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(174): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\OTHER_FUNCTIONS.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(169): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\INITIALIZATION.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(170): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\SCREEN_PRINT_LOOP.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(171): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\RANDOM_NUM.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(172): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\SEE_SEQ.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(173): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\REDO_SEQ.inc'
C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\main.asm(174): Including file 'C:\Users\Florence\microcontroller labs\TestProjectsSolution\Project\OTHER_FUNCTIONS.inc'
                                 
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 /************************************\
                                 |* SECOND TERM PROJECT : SIMON GAME *|
                                 |*     AUTHOR : FLORENCE BARRAS     *|
                                 |*            SUMMER 2018           *|
                                 |*             main.asm             *|
                                 \************************************/
                                 
                                 
                                 .INCLUDE "m328pdef.inc"				; Load addresses of (I/O) registers
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 /**********\
                                 |* MACROS *|
                                 \**********/
                                 
                                 .MACRO KEYBOARD_CHECK_COL			; Row x is LOW, check columns
                                 	NOP
                                 	SBIS PIND,3						; Skip next instruction if not pressed
                                 	RJMP @0
                                 	SBIS PIND,2
                                 	RJMP @1
                                 	SBIS PIND,1
                                 	RJMP @2
                                 	SBIS PIND,0
                                 	RJMP @3
                                 	RJMP @4
                                 .ENDMACRO
                                 
                                 .MACRO FIND_SCORES					; @0 score  @1  ten   @2 unit
                                 	LDI R26,0x64
                                 	CP @0,R26					
                                 	BRGE except						;  Branch if current score >= 100
                                 	LDI @1,0x00
                                 	LDI R18,0x0A
                                 	LDI R27,0x0A
                                 	decaade:
                                 		CP @0,R18
                                 		BRLO numbers
                                 		ADD R18,R27
                                 		INC @1
                                 		BRNE decaade
                                 	numbers:
                                 		SUB R18,R27
                                 		SUB @0,R18
                                 		LDI @2,0x00
                                 		loopnb:
                                 			CPSE @0,@2
                                 			RJMP notthis
                                 			RJMP end_mac
                                 		notthis:
                                 			INC @2
                                 			BRNE loopnb
                                 	except:
                                 		LDI @1,0x09
                                 		LDI @2,0x09
                                 		RJMP end_mac
                                 	end_mac:
                                 .ENDMACRO
                                 
                                 .MACRO DELAY_MACRO
                                 	CALL Buzzer_loop	
                                 	LDI R26,0x01 
                                 	LDI R27,0x02
                                 	LDI R28,0x80
                                 	loop13:
                                 		loop23:
                                 			loop33:
                                 				LDI ZH,high(@1<<1)
                                 				LDI ZL,low(@1<<1)
                                 				CALL SCREEN_PRINT_LOOP
                                 				SBIC PINB,2
                                 				RJMP NoJoy
                                 				RJMP @0
                                 				NoJoy:
                                 				DEC R28
                                 				BRNE loop33
                                 			DEC R27
                                 			BRNE loop23
                                 		DEC R26
                                 		BRNE loop13
                                 .ENDMACRO
                                 
                                 
                                 .MACRO MACRO_PRINT_SCORE
                                 	LDI R16,0   
                                 	CPSE R21,R16					
                                 	RJMP step1 
                                 	LDI ZH, high(@0<<1)  
                                 	LDI ZL, low(@0<<1)
                                 	RJMP end_of_macro
                                 	step1:
                                 		LDI R16,1   
                                 		CPSE R21,R16					
                                 		RJMP step2 
                                 		LDI ZH, high(@1<<1)  
                                 		LDI ZL, low(@1<<1)
                                 		RJMP end_of_macro
                                 	step2:
                                 		LDI R16,2   
                                 		CPSE R21,R16					
                                 		RJMP step3 
                                 		LDI ZH, high(@2<<1)  
                                 		LDI ZL, low(@2<<1)
                                 		RJMP end_of_macro
                                 	step3:
                                 		LDI R16,3   
                                 		CPSE R21,R16					
                                 		RJMP step4 
                                 		LDI ZH, high(@3<<1)  
                                 		LDI ZL, low(@3<<1)
                                 		RJMP end_of_macro
                                 	step4:
                                 		LDI R16,4   
                                 		CPSE R21,R16					
                                 		RJMP step5 
                                 		LDI ZH, high(@4<<1)  
                                 		LDI ZL, low(@4<<1)
                                 		RJMP end_of_macro
                                 	step5:
                                 		LDI R16,5   
                                 		CPSE R21,R16					
                                 		RJMP step6 
                                 		LDI ZH, high(@5<<1)  
                                 		LDI ZL, low(@5<<1)
                                 		RJMP end_of_macro
                                 	step6:
                                 		LDI R16,6   
                                 		CPSE R21,R16					
                                 		RJMP step7 
                                 		LDI ZH, high(@6<<1)  
                                 		LDI ZL, low(@6<<1)
                                 		RJMP end_of_macro
                                 	step7:
                                 		LDI R16,7   
                                 		CPSE R21,R16					
                                 		RJMP step8 
                                 		LDI ZH, high(@7<<1)  
                                 		LDI ZL, low(@7<<1)
                                 		RJMP end_of_macro
                                 	step8:
                                 		LDI R16,8   
                                 		CPSE R21,R16					
                                 		RJMP step9 
                                 		LDI ZH, high(@8<<1)  
                                 		LDI ZL, low(@8<<1)
                                 		RJMP end_of_macro
                                 	step9:
                                 		LDI ZH, high(@9<<1)  
                                 		LDI ZL, low(@9<<1)
                                 		RJMP end_of_macro
                                 	end_of_macro:
                                 		CALL SCREEN_PRINT_LOOP
                                 .ENDMACRO
                                 
                                 
                                 /*********************\
                                 |* BEGINNING OF CODE *|
                                 \*********************/
                                 
                                 .ORG 0x0000
000000 c267                      RJMP init1
                                 .ORG 0x001A									; Program address for timer/counter 1 overflow
00001a c4c3                      RJMP Timer1OverflowInterrupt
                                 .ORG 0x0020									; Program address for timer/counter 0 overflow
000020 c4b1                      RJMP Timer0OverflowInterrupt
                                 
                                 
                                 .INCLUDE "INITIALIZATION.inc"
                                 
                                  * INITIALIZATION.inc
                                  * Initialization of the I/O
                                  */ 
                                 
                                 INITIALIZATION:
                                 
                                 	; Switch
000021 9820                      	CBI DDRB,0						; Pin PB0 is an input
000022 9a28                      	SBI PORTB,0 					; Enable the pull-up resistor
                                 
                                 	; Joystick
000023 9822                      	CBI DDRB,2								; Pin PB2 is an input
000024 9a2a                      	SBI PORTB,2								; Enable the pull-up resistor
                                 
                                 	; Buzzer
000025 9a21                      	SBI DDRB,1								; Pin PB1 is an output (buzzer)
                                 
                                 	; Screen 
000026 9a23                      	SBI DDRB,3
000027 9a24                      	SBI DDRB,4
000028 9a25                      	SBI DDRB,5						
000029 9a2b                      	SBI PORTB,3								; If PORTxn is written to '1' when the pin is 
00002a 9a2c                      	SBI PORTB,4								; configured as an output pin, the port pin is driven high.
00002b 9a2d                      	SBI PORTB,5
                                 
                                 	; Keyboard
                                 	; Rows (7 - first row,6,5,4) are outputs (bits set)
                                 	; Columns (3 - first column,2,1,0) are inputs (bits cleared)
00002c efa0                      	LDI R26,0xF0
00002d b9aa                      	OUT DDRD,R26
                                 	; Columns : enable pull-up (bits set)
00002e 9a5b                      	SBI PORTD,3
00002f 9a5a                      	SBI PORTD,2
000030 9a59                      	SBI PORTD,1
000031 9a58                      	SBI PORTD,0
                                 
                                 	; Start Timer			
000032 e014                      	LDI R17,0x04
000033 9310 0081                 	STS TCCR1B,R17							; Prescaler 256
000035 9478                      	SEI										; Enable global interrupt 
000036 e011                      	LDI R17,0x01
000037 9310 006f                 	STS TIMSK1,R17							; Enable timer1 interrupt
000039 e010                      	LDI R17,0x00
00003a 9310 0003                 	STS PRTIM1,R17
00003c e815                      	LDI R17,0x85							; TCNTinit  (0xFFFF - 16e6 / (256 * 2))  --> 2Hz
00003d 9310 0085                 	STS TCNT1H,R17
00003f ee1d                      	LDI R17,0xED
000040 9310 0084                 	STS TCNT1L,R17
                                 
                                 .INCLUDE "SCREEN_PRINT_LOOP.inc"
000042 9508                      
                                  * SCREEN_PRINT_LOOP.inc
                                  * Used to print different things on the screen, based on the bytes stored in program memory
                                  * These bytes are loaded using LPM instruction, which loads one byte pointed to by the Z-register 
                                  * into the chosen destination register
                                  */ 
                                  
                                 
                                 SCREEN_PRINT_LOOP:
000043 e410                      	LDI R17,0b01000000			; Position of the row ON
                                 	PrintScreenLoop:			; Loop on the rows
000044 d003                      		RCALL ScreenLoop
000045 9516                      		LSR R17 
000046 f7e9                      		BRNE PrintScreenLoop
000047 9508                      	RET
                                 
                                 
                                 
                                 ScreenLoop:						; Turn on one row
000048 93af                      	PUSH R26
000049 93bf                      	PUSH R27
00004a 930f                      	PUSH R16	
00004b e0aa                      	LDI R26,0x0A				
                                 	Loop_on_columns:			; Loop on the 10 bytes pointed by Z
00004c 91b5                      		LPM R27,Z+				; Loads one byte pointed to by the Z-register into the destination register Rd. Z is then incremented
00004d e008                      		LDI R16,0x08
00004e 940e 006a                 		CALL on_or_off 			; Loop on the byte stored in R27  ("Turn on" (bit = 1) or "turn off" (bit = 0) the columns) 
000050 95aa                      		DEC R26
000051 f7d1                      		BRNE Loop_on_columns
000052 e008                      	LDI R16,0x08
000053 2fb1                      	MOV R27,R17
000054 940e 006a                 	CALL on_or_off				; "Turn on" one row, "turn off" the others
000056 9a2c                      	SBI PORTB,4 
000057 d00f                      	RCALL pause 
000058 982c                      	CBI PORTB,4 
000059 910f                      	POP R16
00005a 91bf                      	POP R27
00005b 91af                      	POP R26
00005c 9508                      	RET
                                 
                                 
                                 
                                 pause1:
00005d efaf                      	LDI R26,0xFF
                                 	loop_pause1:
00005e 95aa                      		DEC R26
00005f efbf                      		LDI R27,0xFF
                                 		loop_pause2:
000060 95ba                      			DEC R27
000061 ef9f                      			LDI R25,0xFF
                                 			loop_pause3:
000062 959a                      				DEC R25
000063 f7f1                      				BRNE loop_pause3
000064 f7d9                      			BRNE loop_pause2	
000065 f7c1                      		BRNE loop_pause1
000066 9508                      	RET 
                                 
                                 pause:
000067 dff5                      	RCALL pause1
000068 dff4                      	RCALL pause1
000069 9508                      	RET
                                 
                                 
                                 on_or_off:
00006a 982b                      	CBI PORTB,3
00006b fdb7                      	SBRC R27,7 				; Skip next instruction if MSB of R27 is cleared  (turn on if bit = 1)
00006c 9a2b                      	SBI PORTB,3
00006d 9a2d                      	SBI PORTB,5
00006e 982d                      	CBI PORTB,5
00006f 0fbb                      	LSL R27				
000070 950a                      	DEC R16
000071 f7c1                      	BRNE on_or_off
                                 .INCLUDE "RANDOM_NUM.inc"
000072 9508                      
                                  * RANDOM_NUM.inc
                                  * Generate a random number between 1 and 4, stored in R20. Linear congruential algorithm
                                  */ 
                                 
                                 
                                  
                                 RANDOM_NUM:
                                 	
                                 	; First generate a one-byte pseudo-random number (so that period is high enough to have a 'good' pseudo-random number)
                                 	; Algorithm implemented: Linear-Congruential Generator: x = (a * x_prev + b) modulo m   , m = 128
                                 
000073 e0a5                      	LDI R26,0x05				; a = 5 (for generation of random numbers)
                                 
000074 9fda                      	MUL R29,R26
000075 0180                      	MOVW R16,R0					; R16: low bits / R17: high bits
000076 e0a3                      	LDI R26,0x03				; b = 3
000077 0f0a                      	ADD R16,R26
                                 
                                 
000078 2fd0                      	MOV R29,R16					; update
                                 
                                 	; R29 contains a pseudo-random byte. To generate a pseudo-random number between 1 and 4, we keep only 2 bits of R29 and we add 1
                                 
000079 e040                      	LDI R20,0x00
00007a fd06                      	SBRC R16,6		
00007b e042                      	LDI R20,0x02
00007c fd03                      	SBRC R16,3	
00007d 9543                      	INC R20
00007e 9543                      	INC R20
                                 
00007f 9508                      	RET
                                 .INCLUDE "SEE_SEQ.inc"
                                 
                                  * SEE_SEQ.inc
                                  * One random part of the screen is lit up. This action is repeated to form a sequence of a certain length
                                  */ 
                                 
                                 SEE_SEQ:
                                 
                                 	show_seq:
000080 940e 0073                 		CALL RANDOM_NUM		; Give a random number stored in R20 to know which part of the board must be lit up
000082 e0a1                      		LDI R26,0x01
000083 134a                      		CPSE R20,R26			
000084 c001                      		RJMP next1
000085 c008                      		RJMP First_quart
                                 
                                 		next1:
000086 e0a2                      			LDI R26,0x02
000087 134a                      			CPSE R20,R26
000088 c001                      			RJMP next2
000089 c007                      			RJMP Second_quart
                                 		next2:
00008a e0a3                      			LDI R26,0x03
00008b 134a                      			CPSE R20,R26
00008c c00a                      			RJMP Fourth_quart
00008d c006                      			RJMP Third_quart
                                 		
                                 		First_quart:	
00008e 940e 0159                 			CALL FIRST_PART
000090 c009                      			RJMP cont
                                 
                                 		Second_quart:
000091 940e 0164                 			CALL SECOND_PART
000093 c006                      			RJMP cont
                                 
                                 		Third_quart:
000094 940e 0171                 			CALL THIRD_PART
000096 c003                      			RJMP cont
                                 
                                 		Fourth_quart:
000097 940e 017e                 			CALL FOURTH_PART
000099 c000                      			RJMP cont
                                 
                                 		cont:
                                 			; Delay depending on speed (controlled via R19, incremented every 0.5s)
00009a e5af                      			LDI R26,0x5F 
00009b 1ba3                      			SUB R26,R19  
00009c e0b3                      			LDI R27,0x03
00009d e1c0                      			LDI R28,0x10
00009e 940e 0149                 			CALL Delay				
                                 
                                 			; 'Turn off' screen between each 'member' of the sequence
0000a0 940e 0189                 			CALL TURN_OFF
0000a2 e2a0                      			LDI R26,0x20
0000a3 efbf                      			LDI R27,0xFF
0000a4 efcf                      			LDI R28,0xFF
0000a5 940e 0149                 			CALL Delay
                                 
                                 			; check if sequence is over or not
0000a7 e0a1                      			LDI R26,0x01
0000a8 13ae                      			CPSE R26,R30			
0000a9 c001                      			RJMP continue_seq
0000aa c002                      			RJMP stop_seq
                                 	
                                 	continue_seq:
0000ab 95ea                      		DEC R30
0000ac cfd3                      		RJMP show_seq
                                 
                                 	stop_seq:
0000ad 2fd6                      		MOV R29,R22			; Seed for generation of random numbers
0000ae 2fef                      		MOV R30,R31	
0000af e080                      		LDI R24,0x00
                                 .INCLUDE "REDO_SEQ.inc"
0000b0 9508                      
                                  * REDO_SEQ.inc
                                  * The user has to redo the sequence. If he succeeds, the length of the sequence is increased. If he fails, the game ends
                                  */ 
                                 
                                 REDO_SEQ:
                                 
                                 	; "Reload" random sequence to check 
0000b1 940e 0073                 	CALL RANDOM_NUM
                                 
                                 	waiting:
0000b3 9a5f                      		SBI PORTD,7															
0000b4 9a5e                      		SBI PORTD,6
0000b5 9a5d                      		SBI PORTD,5
0000b6 9a5c                      		SBI PORTD,4
0000b7 ef2e                      		LDI R18,0xFE
                                 		; If R24 > 30, ends game (15s of inactivity)
0000b8 e1ae                      		LDI R26,0x1E
0000b9 138a                      		CPSE R24,R26
0000ba c001                      		RJMP not_ending					
0000bb c068                      		RJMP error		
                                 
                                 	not_ending:																	; Keyboard: 4 steps method
                                 		row1_low:													
0000bc 985f                      			CBI PORTD,7															; STEP 1 : Row 1 set to LOW
0000bd 9a5e                      			SBI PORTD,6
0000be 9a5d                      			SBI PORTD,5
0000bf 9a5c                      			SBI PORTD,4
0000c0 0000
0000c1 9b4b
0000c2 c032
0000c3 9b4a
0000c4 c02f
0000c5 9b49
0000c6 c02d
0000c7 9b48
0000c8 c02b
0000c9 c000                      			KEYBOARD_CHECK_COL BT7Pressed,OtherBut,OtherBut,OtherBut,row2_low
                                 		row2_low:																	
0000ca 9a5f                      			SBI PORTD,7															; STEP 2 : Row 2 set to LOW
0000cb 985e                      			CBI PORTD,6
0000cc 9a5d                      			SBI PORTD,5
0000cd 9a5c                      			SBI PORTD,4
0000ce 0000
0000cf 9b4b
0000d0 c02b
0000d1 9b4a
0000d2 c021
0000d3 9b49
0000d4 c01f
0000d5 9b48
0000d6 c01d
0000d7 c000                      			KEYBOARD_CHECK_COL BT4Pressed,OtherBut,OtherBut,OtherBut,row3_low
                                 		row3_low:
0000d8 9a5f                      			SBI PORTD,7															; STEP 3 : Row 3 set to LOW
0000d9 9a5e                      			SBI PORTD,6
0000da 985d                      			CBI PORTD,5
0000db 9a5c                      			SBI PORTD,4
0000dc 0000
0000dd 9b4b
0000de c024
0000df 9b4a
0000e0 c013
0000e1 9b49
0000e2 c011
0000e3 9b48
0000e4 c00f
0000e5 c000                      			KEYBOARD_CHECK_COL BT1Pressed,OtherBut,OtherBut,OtherBut,row4_low
                                 		row4_low:
0000e6 9a5f                      			SBI PORTD,7															; STEP 4 : Row 4 set to LOW
0000e7 9a5e                      			SBI PORTD,6
0000e8 9a5d                      			SBI PORTD,5
0000e9 985c                      			CBI PORTD,4
0000ea 0000
0000eb 9b4b
0000ec c01d
0000ed 9b4a
0000ee c005
0000ef 9b49
0000f0 c003
0000f1 9b48
0000f2 c001
0000f3 cfbf                      			KEYBOARD_CHECK_COL BTAPressed,OtherBut,OtherBut,OtherBut,waiting
                                 
                                 		OtherBut:
0000f4 cfbe                      			RJMP waiting
                                 		
                                 		BT7Pressed:
0000f5 ef2f                      			LDI R18,0xFF
0000f6 940e 0159                 			CALL FIRST_PART
0000f8 e0a1                      			LDI R26,0x01
0000f9 134a                      			CPSE R20,R26
0000fa c029                      			RJMP error
0000fb c015                      			RJMP correct
                                 
                                 
                                 		BT4Pressed:
0000fc ef2f                      			LDI R18,0xFF
0000fd 940e 0164                 			CALL SECOND_PART
0000ff e0a2                      			LDI R26,0x02
000100 134a                      			CPSE R20,R26
000101 c022                      			RJMP error
000102 c00e                      			RJMP correct	
                                 			
                                 
                                 		BT1Pressed:
000103 ef2f                      			LDI R18,0xFF
000104 940e 0171                 			CALL THIRD_PART
000106 e0a3                      			LDI R26,0x03
000107 134a                      			CPSE R20,R26
000108 c01b                      			RJMP error
000109 c007                      			RJMP correct
                                 
                                 		BTAPressed:
00010a ef2f                      			LDI R18,0xFF
00010b 940e 017e                 			CALL FOURTH_PART
00010d e0a4                      			LDI R26,0x04
00010e 134a                      			CPSE R20,R26
00010f c014                      			RJMP error
000110 c000                      			RJMP correct
                                 			
                                 		correct:
000111 ed7b                      			LDI R23,0xDB			; A5 (880 Hz) (FF - 16e6 / (256 * 880 * 2)) because complete period is 'buzzer on -> 
000112 940e 0150                 			CALL Buzzer_loop		; next time buzzer is on ----> corresponds to 2 overflows of timer 0
000114 e0af                      			LDI R26,0x0F 
000115 e0b8                      			LDI R27,0x08
000116 e3c0                      			LDI R28,0x30
000117 940e 0149                 			CALL Delay
000119 e090                      			LDI R25,0x00
00011a 9390 006e                 			STS TIMSK0,R25			; Disable interrpt for timer 0
00011c 940e 0189                 			CALL TURN_OFF
00011e e2a0                      			LDI R26,0x20
00011f e4b0                      			LDI R27,0x40
000120 e5c0                      			LDI R28,0x50
000121 940e 0149                 			CALL Delay
000123 c009                      			RJMP continue_game
                                 
                                 		error:
000124 e170                      			LDI R23,0x10			; 130.81 Hz (C3)
000125 940e 0150                 			CALL Buzzer_loop
000127 e1af                      			LDI R26,0x1F 
000128 e0b8                      			LDI R27,0x08
000129 e3c0                      			LDI R28,0x30
00012a 940e 0149                 			CALL Delay
00012c c31e                      			RJMP end
                                 		
                                 
                                 	continue_game:
00012d e0a1                      		LDI R26,0x01
00012e 13ae                      		CPSE R26,R30
00012f c001                      		RJMP continue_redo
000130 c002                      		RJMP stop_redo
                                 	
                                 	continue_redo:
000131 95ea                      		DEC R30
000132 cf7e                      		RJMP REDO_SEQ
                                 
                                 	stop_redo:
000133 9553                      		INC R21							; Increase score
000134 95f3                      		INC R31							; Increase sequence length
000135 2fd6                      		MOV R29,R22						; Seed for generation of random numbers
000136 2fef                      		MOV R30,R31	
                                 
000137 e8a0                      		LDI R26,0x80
000138 efbf                      		LDI R27,0xFF
000139 efcf                      		LDI R28,0xFF
00013a 940e 0149                 		CALL Delay
                                 
                                 .INCLUDE "OTHER_FUNCTIONS.inc"
00013c c309                      
                                  * OTHER_FUNCTIONS.inc
                                  *  - col_or_row_off
                                  *  - col_or_row_on
                                  *	- Delay
                                  *  - Buzzer_loop
                                  *  - FIRST_PART
                                  *  - SECOND_PART
                                  *  - THIRD_PART
                                  *  - FOURTH_PART
                                  *  - TURN_OFF
                                  *  - Delay1
                                  *  - EEPROM_READ
                                  *  - EEPROM_WRITE
                                  */ 
                                 
                                 
                                  
                                 col_or_row_off:			
00013d 982b                      	CBI PORTB,3
00013e 9a2d                      	SBI PORTB,5
00013f 982d                      	CBI PORTB,5
000140 95aa                      	DEC R26
000141 f7d9                      	BRNE col_or_row_off
000142 9508                      	RET
                                 
                                 col_or_row_on:		
000143 9a2b                      	SBI PORTB,3
000144 9a2d                      	SBI PORTB,5
000145 982d                      	CBI PORTB,5
000146 95aa                      	DEC R26
000147 f7d9                      	BRNE col_or_row_on
000148 9508                      	RET
                                 
                                 
                                 Delay:
                                 	loop1:
                                 		loop2:
                                 			loop3:
000149 95ca                      				DEC R28
00014a f7f1                      				BRNE loop3
00014b 95ba                      			DEC R27
00014c f7e1                      			BRNE loop2
00014d 95aa                      		DEC R26
00014e f7d1                      		BRNE loop1
00014f 9508                      	RET
                                 
                                 
                                 Buzzer_loop:
000150 930f                      	PUSH R16
000151 e001                      	LDI R16,0x01
000152 9300 006e                 	STS TIMSK0,R16			; Enable interrupt for timer 0
000154 e004                      	LDI R16,0x04			; Prescaler 256
000155 bd05                      	OUT TCCR0B,R16 
000156 bd76                      	OUT TCNT0,R23			; TCNT init
000157 910f                      	POP R16
000158 9508                      	RET
                                 	
                                 
                                 		
                                 FIRST_PART:
000159 e3ac                      	LDI R26,0x3C
00015a dfe2                      	RCALL col_or_row_off
00015b e1a4                      	LDI R26,0x14
00015c dfe6                      	RCALL col_or_row_on
00015d e0a8                      	LDI R26,0x08
00015e dfe4                      	RCALL col_or_row_on
00015f 9a2c                      	SBI PORTB,4
000160 940e 0067                 	CALL pause
000162 982c                      	CBI PORTB,4
000163 9508                      	RET
                                 
                                 SECOND_PART:
000164 e2a8                      	LDI R26,0x28
000165 dfd7                      	RCALL col_or_row_off
000166 e1a4                      	LDI R26,0x14
000167 dfdb                      	RCALL col_or_row_on
000168 e1a4                      	LDI R26,0x14
000169 dfd3                      	RCALL col_or_row_off
00016a e0a8                      	LDI R26,0x08
00016b dfd7                      	RCALL col_or_row_on
00016c 9a2c                      	SBI PORTB,4
00016d 940e 0067                 	CALL pause
00016f 982c                      	CBI PORTB,4
000170 9508                      	RET
                                 
                                 THIRD_PART:
000171 e1a4                      	LDI R26,0x14
000172 dfca                      	RCALL col_or_row_off
000173 e1a4                      	LDI R26,0x14
000174 dfce                      	RCALL col_or_row_on
000175 e2a8                      	LDI R26,0x28
000176 dfc6                      	RCALL col_or_row_off
000177 e0a8                      	LDI R26,0x08
000178 dfca                      	RCALL col_or_row_on
000179 9a2c                      	SBI PORTB,4
00017a 940e 0067                 	CALL pause
00017c 982c                      	CBI PORTB,4
00017d 9508                      	RET
                                 
                                 FOURTH_PART:
00017e e1a4                      	LDI R26,0x14
00017f dfc3                      	RCALL col_or_row_on
000180 e3ac                      	LDI R26,0x3C
000181 dfbb                      	RCALL col_or_row_off
000182 e0a8                      	LDI R26,0x08
000183 dfbf                      	RCALL col_or_row_on
000184 9a2c                      	SBI PORTB,4
000185 940e 0067                 	CALL pause
000187 982c                      	CBI PORTB,4
000188 9508                      	RET
                                 
                                 TURN_OFF:
000189 e5a8                      	LDI R26,0x58
00018a dfb2                      	RCALL col_or_row_off
00018b 9a2c                      	SBI PORTB,4
00018c 940e 0067                 	CALL pause
00018e 982c                      	CBI PORTB,4
00018f 9508                      	RET
                                 	
                                 
                                 
                                 Delay1:
000190 940e 0150                 	CALL Buzzer_loop
000192 e0a1                      	LDI R26,0x01 
000193 efbf                      	LDI R27,0xFF
                                 	loop11:
                                 		loop21:
000194 e000                      			LDI R16,0x00
000195 1380                      			CPSE R24,R16
000196 c001                      			RJMP curr
000197 c03e                      			RJMP besttt
                                 			curr:
000198 2f5d                      			MOV R21,R29
000199 e000
00019a 1350
00019b c003
00019c e0fa
00019d e3e8
00019e c033
00019f e001
0001a0 1350
0001a1 c003
0001a2 e0fa
0001a3 e7ee
0001a4 c02d
0001a5 e002
0001a6 1350
0001a7 c003
0001a8 e0fa
0001a9 ece4
0001aa c027
0001ab e003
0001ac 1350
0001ad c003
0001ae e0fb
0001af e0ea
0001b0 c021
0001b1 e004
0001b2 1350
0001b3 c003
0001b4 e0fb
0001b5 e5e0
0001b6 c01b
0001b7 e005
0001b8 1350
0001b9 c003
0001ba e0fb
0001bb e9e6
0001bc c015
0001bd e006
0001be 1350
0001bf c003
0001c0 e0fb
0001c1 edec
0001c2 c00f
0001c3 e007
0001c4 1350
0001c5 c003
0001c6 e0fc
0001c7 e2e2
0001c8 c009
0001c9 e008
0001ca 1350
0001cb c003
0001cc e0fc
0001cd e6e8
0001ce c003
0001cf e0fc
0001d0 eaee
0001d1 c000
0001d2 940e 0043                 			MACRO_PRINT_SCORE score_zero,score_one,score_two,score_three,score_four,score_five,score_six,score_seven,score_eight,score_nine
0001d4 2f56                      			MOV R21,R22
0001d5 c03d                      			RJMP cont_score
                                 			besttt:
0001d6 2f53                      			MOV R21,R19
0001d7 e000
0001d8 1350
0001d9 c003
0001da e0ff
0001db ebe0
0001dc c033
0001dd e001
0001de 1350
0001df c003
0001e0 e0ff
0001e1 efe6
0001e2 c02d
0001e3 e002
0001e4 1350
0001e5 c003
0001e6 e1f0
0001e7 e3ec
0001e8 c027
0001e9 e003
0001ea 1350
0001eb c003
0001ec e1f0
0001ed e8e2
0001ee c021
0001ef e004
0001f0 1350
0001f1 c003
0001f2 e1f0
0001f3 ece8
0001f4 c01b
0001f5 e005
0001f6 1350
0001f7 c003
0001f8 e1f1
0001f9 e0ee
0001fa c015
0001fb e006
0001fc 1350
0001fd c003
0001fe e1f1
0001ff e5e4
000200 c00f
000201 e007
000202 1350
000203 c003
000204 e1f1
000205 e9ea
000206 c009
000207 e008
000208 1350
000209 c003
00020a e1f1
00020b eee0
00020c c003
00020d e1f2
00020e e2e6
00020f c000
000210 940e 0043                 			MACRO_PRINT_SCORE best_zero,best_one,best_two,best_three,best_four,best_five,best_six,best_seven,best_eight,best_nine
000212 2f54                      			MOV R21,R20
                                 			cont_score:
000213 e000
000214 1350
000215 c003
000216 e0fc
000217 efe4
000218 c033
000219 e001
00021a 1350
00021b c003
00021c e0fd
00021d e3ea
00021e c02d
00021f e002
000220 1350
000221 c003
000222 e0fd
000223 e8e0
000224 c027
000225 e003
000226 1350
000227 c003
000228 e0fd
000229 ece6
00022a c021
00022b e004
00022c 1350
00022d c003
00022e e0fe
00022f e0ec
000230 c01b
000231 e005
000232 1350
000233 c003
000234 e0fe
000235 e5e2
000236 c015
000237 e006
000238 1350
000239 c003
00023a e0fe
00023b e9e8
00023c c00f
00023d e007
00023e 1350
00023f c003
000240 e0fe
000241 edee
000242 c009
000243 e008
000244 1350
000245 c003
000246 e0ff
000247 e2e4
000248 c003
000249 e0ff
00024a e6ea
00024b c000
00024c 940e 0043                 			MACRO_PRINT_SCORE zero,one,two,three,four,five,six,seven,eight,nine
00024e 991a                      			SBIC PINB,2
00024f c001                      			RJMP NoJoy1
000250 c27c                      			RJMP Joy
                                 			NoJoy1:
000251 95ba                      			DEC R27
000252 e000                      			LDI R16,0x00
000253 13b0                      			CPSE R27,R16
000254 cf3f                      			RJMP loop21
000255 95aa                      		DEC R26
000256 13a0                      		CPSE R26,R16
000257 cf3c                      		RJMP loop11
000258 9508                      	RET
                                 
                                 
                                 EEPROM_READ:
000259 99f9                      	SBIC EECR,1
00025a cffe                      	RJMP EEPROM_READ		; Wait until bit 1 of EECR is cleared (means previous write is completed)
00025b bd22                      	OUT EEARH,R18			; Address (R18:R17) is stored in the Address Registers High and Low
00025c bd11                      	OUT EEARL,R17
00025d 9af8                      	SBI EECR,0				; Set bit EEPROM Read Enable  -->  Start reading
00025e b5e0                      	IN R30,EEDR				; Store in R30 the readed data (contained in EEDR)
00025f 9508                      	RET
                                 
                                 
                                 EEPROM_WRITE:
000260 99f9                      	SBIC EECR,1
000261 cffe                      	RJMP EEPROM_WRITE		; Wait until bit 1 of EECR is cleared (means previous write is completed)
000262 bd22                      	OUT EEARH,R18			; Address (R18:R17) is stored in the Address Registers High and Low
000263 bd11                      	OUT EEARL,R17
000264 bde0                      	OUT EEDR,R30			; Data from R30 are written to Data Register
000265 9afa                      	SBI EECR,2				; Set bit 2 of Control register	(needed so that next instruction effectively write)	
000266 9af9                      	SBI EECR,1				; Start EEPROM write
000267 9508                      	RET
                                 
                                 
                                 
                                 
                                 init1:
000268 e001                      	LDI R16,0x01
                                 
                                 /* WARNING : BEFORE BEGINNING THE GAME FOR THE FIRST TIME, TAKE CARE THE EEPROM IS SET TO ZERO AT ADDRESS 0x0000
                                 	;CLI
                                 	LDI R18,0x00
                                 	LDI R17,0x00
                                 	LDI R30,0x00
                                 	CALL EEPROM_WRITE
                                 	;SEI
                                 */
                                 
                                 
                                 
                                 /******************\
                                 |* INITIALIZATION *|
                                 \******************/
                                 
                                 init:
000269 940e 0021                 	CALL INITIALIZATION
00026b c000                      	RJMP start_screen
                                 
                                 
                                 /***********************************************************\
                                 |* START SCREEN : PRESS JOYSTICK TO START THE GAME + MUSIC *|
                                 \***********************************************************/
                                 
                                 start_screen:
                                 
00026c ea7f                      	LDI R23,0xAF								; TCNT_INIT for timer 0 --> Key G (4)
00026d 940e 0150
00026f e0a1
000270 e0b2
000271 e8c0
000272 e0f9
000273 efe2
000274 940e 0043
000276 991a
000277 c001
000278 c1bc
000279 95ca
00027a f7b9
00027b 95ba
00027c f7a9
00027d 95aa
00027e f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
00027f ec70                      	LDI R23,0xC0								; Key B 
000280 940e 0150
000282 e0a1
000283 e0b2
000284 e8c0
000285 e0f9
000286 efe2
000287 940e 0043
000289 991a
00028a c001
00028b c1a9
00028c 95ca
00028d f7b9
00028e 95ba
00028f f7a9
000290 95aa
000291 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
000292 e975                      	LDI R23,0x95								; Key D 
000293 940e 0150
000295 e0a1
000296 e0b2
000297 e8c0
000298 e0f9
000299 efe2
00029a 940e 0043
00029c 991a
00029d c001
00029e c196
00029f 95ca
0002a0 f7b9
0002a1 95ba
0002a2 f7a9
0002a3 95aa
0002a4 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
0002a5 e975                      	LDI R23,0x95								; Key D 
0002a6 940e 0150
0002a8 e0a1
0002a9 e0b2
0002aa e8c0
0002ab e1f2
0002ac e6ec
0002ad 940e 0043
0002af 991a
0002b0 c001
0002b1 c183
0002b2 95ca
0002b3 f7b9
0002b4 95ba
0002b5 f7a9
0002b6 95aa
0002b7 f799                      	DELAY_MACRO Joy_start,switch_sound
0002b8 ea7b                      	LDI R23,0xAB								; Key F#
0002b9 940e 0150
0002bb e0a1
0002bc e0b2
0002bd e8c0
0002be e1f2
0002bf e6ec
0002c0 940e 0043
0002c2 991a
0002c3 c001
0002c4 c170
0002c5 95ca
0002c6 f7b9
0002c7 95ba
0002c8 f7a9
0002c9 95aa
0002ca f799                      	DELAY_MACRO Joy_start,switch_sound
0002cb eb78                      	LDI R23,0xB8								; Key A
0002cc 940e 0150
0002ce e0a1
0002cf e0b2
0002d0 e8c0
0002d1 e1f2
0002d2 e6ec
0002d3 940e 0043
0002d5 991a
0002d6 c001
0002d7 c15d
0002d8 95ca
0002d9 f7b9
0002da 95ba
0002db f7a9
0002dc 95aa
0002dd f799                      	DELAY_MACRO Joy_start,switch_sound
0002de ea70                      	LDI R23,0xA0								; Key E
0002df 940e 0150
0002e1 e0a1
0002e2 e0b2
0002e3 e8c0
0002e4 e0f9
0002e5 efe2
0002e6 940e 0043
0002e8 991a
0002e9 c001
0002ea c14a
0002eb 95ca
0002ec f7b9
0002ed 95ba
0002ee f7a9
0002ef 95aa
0002f0 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
0002f1 ea7f                      	LDI R23,0xAF								; Key G
0002f2 940e 0150
0002f4 e0a1
0002f5 e0b2
0002f6 e8c0
0002f7 e0f9
0002f8 efe2
0002f9 940e 0043
0002fb 991a
0002fc c001
0002fd c137
0002fe 95ca
0002ff f7b9
000300 95ba
000301 f7a9
000302 95aa
000303 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
000304 ec70                      	LDI R23,0xC0								; Key B
000305 940e 0150
000307 e0a1
000308 e0b2
000309 e8c0
00030a e0f9
00030b efe2
00030c 940e 0043
00030e 991a
00030f c001
000310 c124
000311 95ca
000312 f7b9
000313 95ba
000314 f7a9
000315 95aa
000316 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
000317 ec70                      	LDI R23,0xC0								; Key B 
000318 940e 0150
00031a e0a1
00031b e0b2
00031c e8c0
00031d e1f2
00031e e6ec
00031f 940e 0043
000321 991a
000322 c001
000323 c111
000324 95ca
000325 f7b9
000326 95ba
000327 f7a9
000328 95aa
000329 f799                      	DELAY_MACRO Joy_start,switch_sound
00032a e975                      	LDI R23,0x95								; Key D 
00032b 940e 0150
00032d e0a1
00032e e0b2
00032f e8c0
000330 e1f2
000331 e6ec
000332 940e 0043
000334 991a
000335 c001
000336 c0fe
000337 95ca
000338 f7b9
000339 95ba
00033a f7a9
00033b 95aa
00033c f799                      	DELAY_MACRO Joy_start,switch_sound
00033d ea7b                      	LDI R23,0xAB								; Key F#
00033e 940e 0150
000340 e0a1
000341 e0b2
000342 e8c0
000343 e1f2
000344 e6ec
000345 940e 0043
000347 991a
000348 c001
000349 c0eb
00034a 95ca
00034b f7b9
00034c 95ba
00034d f7a9
00034e 95aa
00034f f799                      	DELAY_MACRO Joy_start,switch_sound
000350 e878                      	LDI R23,0x88								; Key C
000351 940e 0150
000353 e0a1
000354 e0b2
000355 e8c0
000356 e0f9
000357 efe2
000358 940e 0043
00035a 991a
00035b c001
00035c c0d8
00035d 95ca
00035e f7b9
00035f 95ba
000360 f7a9
000361 95aa
000362 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
000363 ea70                      	LDI R23,0xA0								; Key E
000364 940e 0150
000366 e0a1
000367 e0b2
000368 e8c0
000369 e0f9
00036a efe2
00036b 940e 0043
00036d 991a
00036e c001
00036f c0c5
000370 95ca
000371 f7b9
000372 95ba
000373 f7a9
000374 95aa
000375 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
000376 ea7f                      	LDI R23,0xAF								; Key G
000377 940e 0150
000379 e0a1
00037a e0b2
00037b e8c0
00037c e0f9
00037d efe2
00037e 940e 0043
000380 991a
000381 c001
000382 c0b2
000383 95ca
000384 f7b9
000385 95ba
000386 f7a9
000387 95aa
000388 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
000389 ea7f                      	LDI R23,0xAF								; Key G
00038a 940e 0150
00038c e0a1
00038d e0b2
00038e e8c0
00038f e1f2
000390 e6ec
000391 940e 0043
000393 991a
000394 c001
000395 c09f
000396 95ca
000397 f7b9
000398 95ba
000399 f7a9
00039a 95aa
00039b f799                      	DELAY_MACRO Joy_start,switch_sound
00039c ec70                      	LDI R23,0xC0								; Key B
00039d 940e 0150
00039f e0a1
0003a0 e0b2
0003a1 e8c0
0003a2 e1f2
0003a3 e6ec
0003a4 940e 0043
0003a6 991a
0003a7 c001
0003a8 c08c
0003a9 95ca
0003aa f7b9
0003ab 95ba
0003ac f7a9
0003ad 95aa
0003ae f799                      	DELAY_MACRO Joy_start,switch_sound
0003af e975                      	LDI R23,0x95								; Key D
0003b0 940e 0150
0003b2 e0a1
0003b3 e0b2
0003b4 e8c0
0003b5 e1f2
0003b6 e6ec
0003b7 940e 0043
0003b9 991a
0003ba c001
0003bb c079
0003bc 95ca
0003bd f7b9
0003be 95ba
0003bf f7a9
0003c0 95aa
0003c1 f799                      	DELAY_MACRO Joy_start,switch_sound
0003c2 e878                      	LDI R23,0x88								; Key C
0003c3 940e 0150
0003c5 e0a1
0003c6 e0b2
0003c7 e8c0
0003c8 e0f9
0003c9 efe2
0003ca 940e 0043
0003cc 991a
0003cd c001
0003ce c066
0003cf 95ca
0003d0 f7b9
0003d1 95ba
0003d2 f7a9
0003d3 95aa
0003d4 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
0003d5 ea70                      	LDI R23,0xA0								; Key E
0003d6 940e 0150
0003d8 e0a1
0003d9 e0b2
0003da e8c0
0003db e0f9
0003dc efe2
0003dd 940e 0043
0003df 991a
0003e0 c001
0003e1 c053
0003e2 95ca
0003e3 f7b9
0003e4 95ba
0003e5 f7a9
0003e6 95aa
0003e7 f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
0003e8 ea7f                      	LDI R23,0xAF								; Key G
0003e9 940e 0150
0003eb e0a1
0003ec e0b2
0003ed e8c0
0003ee e0f9
0003ef efe2
0003f0 940e 0043
0003f2 991a
0003f3 c001
0003f4 c040
0003f5 95ca
0003f6 f7b9
0003f7 95ba
0003f8 f7a9
0003f9 95aa
0003fa f799                      	DELAY_MACRO Joy_start,Press_JS_to_start
0003fb e975                      	LDI R23,0x95								; Key D
0003fc 940e 0150
0003fe e0a1
0003ff e0b2
000400 e8c0
000401 e1f2
000402 e6ec
000403 940e 0043
000405 991a
000406 c001
000407 c02d
000408 95ca
000409 f7b9
00040a 95ba
00040b f7a9
00040c 95aa
00040d f799                      	DELAY_MACRO Joy_start,switch_sound
00040e ea7b                      	LDI R23,0xAB								; Key F#
00040f 940e 0150
000411 e0a1
000412 e0b2
000413 e8c0
000414 e1f2
000415 e6ec
000416 940e 0043
000418 991a
000419 c001
00041a c01a
00041b 95ca
00041c f7b9
00041d 95ba
00041e f7a9
00041f 95aa
000420 f799                      	DELAY_MACRO Joy_start,switch_sound
000421 eb78                      	LDI R23,0xB8								; Key A
000422 940e 0150
000424 e0a1
000425 e0b2
000426 e8c0
000427 e1f2
000428 e6ec
000429 940e 0043
00042b 991a
00042c c001
00042d c007
00042e 95ca
00042f f7b9
000430 95ba
000431 f7a9
000432 95aa
000433 f799                      	DELAY_MACRO Joy_start,switch_sound
000434 ce37                      	RJMP start_screen
                                 
                                 	
                                 	Joy_start:
000435 94f8                      		CLI							; Stop timer (Global Interrupt Disable)
000436 9160 0026                 		LDS R22,TCNT0				; Seed for generation of random numbers 
000438 0f6c                      		ADD R22,R28
000439 9478                      		SEI							; (random as we use the time at which the user presses the joystick)
00043a e0a1                      		LDI R26,0x01
00043b 130a                      		CPSE R16,R26
00043c 2f62                      		MOV R22,R18
00043d e090                      		LDI R25,0x00
00043e 9390 006e                 		STS TIMSK0,R25
000440 2fd6                      		MOV R29,R22
000441 e0e0                      		LDI R30,0x00				; Counter for the sequence
000442 e0f1                      		LDI R31,0x01				; Length of the sequence
000443 e030                      		LDI R19,0x00				; For speed
000444 e050                      		LDI R21,0x00				; Score
000445 c000                      		RJMP main
                                 
                                 
                                 /*************************\
                                 |* MAIN LOOP OF THE GAME *|
                                 \*************************/
                                 
                                 main: 
                                 
000446 2fef                      	MOV R30,R31			; Counter for the sequence is equal to its length (increased every time the player succeeds)
                                 
                                 	; PART 1 : The screen is divided in four parts, that lit up randomly (only one part is lit up at one time)		
000447 940e 0080                 	CALL SEE_SEQ
                                 
                                 	; PART 2 : The user must reproduce the sequence. The game ends when the user makes an error, or when he does not do any action
                                 	; during 15	consecutive seconds
000449 940e 00b1                 	CALL REDO_SEQ
                                 
                                 
                                 /*******************\
                                 |* END OF THE GAME *|
                                 \*******************/
                                 
                                 end:
00044b e090                      	LDI R25,0x00
00044c 9390 006e                 	STS TIMSK0,R25				; Disable interrpt for timer 0 (to stop error sound)
00044e 9829                      	CBI PORTB,1
                                 
00044f 94f8                      	CLI							; Disable all interrupts (to not interfer with reading operation of the EEPROM)
000450 e020                      	LDI R18,0x00
000451 e010                      	LDI R17,0x00
000452 940e 0259                 	CALL EEPROM_READ			; Load the stored highest score	(in R30) from the EEPROM (non-volatile memory)
000454 9478                      	SEI
                                 					
000455 175e                      	CP R21,R30					; Compare stored high score to current score (R21)
000456 f40c                      	BRGE newHighScore			;  Branch if R21 >= R30 (unsigned)
000457 c007                      	RJMP end_s
                                 
                                 	newHighScore:
000458 2fe5                      		MOV R30,R21
000459 94f8                      		CLI
00045a e020                      		LDI R18,0x00
00045b e010                      		LDI R17,0x00
00045c 940e 0260                 		CALL EEPROM_WRITE		; Write in EEPROM the new best score
00045e 9478                      		SEI
                                 		
                                 
                                 
                                 end_s:
00045f e6a4
000460 175a
000461 f484
000462 e0d0
000463 e02a
000464 e0ba
000465 1752
000466 f018
000467 0f2b
000468 95d3
000469 f7d9
00046a 1b2b
00046b 1b52
00046c e060
00046d 1356
00046e c001
00046f c005
000470 9563
000471 f7d9
000472 e0d9
000473 e069
000474 c000                      	FIND_SCORES R21,R29,R22		; Find out the ten and unit of current score, in order to print it
000475 e6a4
000476 17ea
000477 f484
000478 e030
000479 e02a
00047a e0ba
00047b 17e2
00047c f018
00047d 0f2b
00047e 9533
00047f f7d9
000480 1b2b
000481 1be2
000482 e040
000483 13e4
000484 c001
000485 c005
000486 9543
000487 f7d9
000488 e039
000489 e049
00048a c000                      	FIND_SCORES R30,R19,R20		; Find out the ten and unit of best score, in order to print it
00048b 94f8                      	CLI							; Stop timer (Global Interrupt Disable)
00048c 9120 0084                 	LDS R18,TCNT1L				; Seed for generation of random numbers for the next game 
00048e 9478                      	SEI							; Global enable interrupt
00048f e090                      	LDI R25,0x00
000490 9390 006f                 	STS TIMSK1,R25				; Disable interrupt for timer 1
                                 
                                 
                                 /******************************************************************************\
                                 |* END SCREEN : SCORE + BEST SCORE + PRESS JOYSTICK TO START THE GAME + MUSIC *|
                                 \******************************************************************************/
                                 			
                                 end_screen:
                                 
                                 	; Alternatively print the score, the best score and the text "Press JS to start"
                                 	; Plus: melody
000492 e081                      	LDI R24,0x01
000493 ea75                      	LDI R23,0xA5							; Key F (4)	 	
000494 940e 0190                 	CALL Delay1
000496 eb78                      	LDI R23,0xB8							; Key A			 	
000497 940e 0190                 	CALL Delay1
000499 e87e                      	LDI R23,0x8E							; Key C#		 
00049a 940e 0190                 	CALL Delay1
00049c e080                      	LDI R24,0x00
00049d ea75                      	LDI R23,0xA5							; Key F		 	
00049e 940e 0190                 	CALL Delay1
0004a0 e878                      	LDI R23,0x88							; Key C			 
0004a1 940e 0190                 	CALL Delay1
0004a3 e97b                      	LDI R23,0x9B							; Key D#			 
0004a4 940e 0190                 	CALL Delay1
0004a6 ea7f                      	LDI R23,0xAF							; Key G			 	
0004a7 940e 0150
0004a9 e0a1
0004aa e0b2
0004ab e8c0
0004ac e0f9
0004ad efe2
0004ae 940e 0043
0004b0 991a
0004b1 c001
0004b2 c01a
0004b3 95ca
0004b4 f7b9
0004b5 95ba
0004b6 f7a9
0004b7 95aa
0004b8 f799                      	DELAY_MACRO Joy,Press_JS_to_start
0004b9 ea7b                      	LDI R23,0xAB							; Key F#		 		
0004ba 940e 0150
0004bc e0a1
0004bd e0b2
0004be e8c0
0004bf e0f9
0004c0 efe2
0004c1 940e 0043
0004c3 991a
0004c4 c001
0004c5 c007
0004c6 95ca
0004c7 f7b9
0004c8 95ba
0004c9 f7a9
0004ca 95aa
0004cb f799                      	DELAY_MACRO Joy,Press_JS_to_start
                                 
0004cc cfc5                      	RJMP end_screen
                                 
                                 	
                                 Joy:
0004cd e000                      	LDI R16,0x00
0004ce e090                      	LDI R25,0x00
0004cf 9390 006e                 	STS TIMSK0,R25				; Disable interrupt for timer 0
0004d1 cd97                      	RJMP init
                                 
                                 
                                 
                                 
                                 /*****************************\
                                 |* TIMER INTERRUPT'S ACTIONS *|
                                 \*****************************/
                                 
                                 Timer0OverflowInterrupt:
                                 	; Used for the buzzer
                                 	; If switch is low : no sound
0004d2 b61f                      	IN R1,SREG
0004d3 bd76                      	OUT TCNT0,R23				; TCNTinit
0004d4 9918                      	SBIC PINB,0					; Skip next instruction if bit 0 of pinB is cleared
0004d5 c005                      	RJMP switchHigh				
                                 	switchLow:
0004d6 e070                      		LDI R23,0x00
0004d7 9370 006e                 		STS TIMSK0,R23
0004d9 be1f                      		OUT SREG,R1
0004da 9518                      		RETI
                                 	switchHigh:
0004db 9a19                      		SBI PINB,1				; invert output of buzzer
0004dc be1f                      		OUT SREG,R1
0004dd 9518                      		RETI
                                 	
                                 
                                 Timer1OverflowInterrupt:
                                 	; Used to increase the speed during the game, and to check for user inactivity
                                 	; Plus, at the beginning, to get a random seed
0004de 939f                      	PUSH R25
0004df b61f                      	IN R1,SREG
0004e0 e895                      	LDI R25,0x85                ; TCNTinit (2 Hz) 			
0004e1 9390 0085                 	STS TCNT1H,R25	
0004e3 ee9d                      	LDI R25,0xED					
0004e4 9390 0084                 	STS TCNT1L,R25 
                                 	
0004e6 ef9f                      	LDI R25,0xFF
0004e7 1329                      	CPSE R18,R25
0004e8 c003                      	RJMP wait_state
0004e9 c000                      	RJMP button_pressed
                                 
                                 	button_pressed:
0004ea e080                      		LDI R24,0x00
0004eb c002                      		RJMP continue
                                 
                                 	wait_state:
0004ec 9583                      		INC R24
0004ed c000                      		RJMP continue
                                 
                                 	continue:
0004ee e490                      	LDI R25,0x40
0004ef 1339                      	CPSE R19,R25
0004f0 c001                      	RJMP inc_speed
0004f1 c004                      	RJMP max_speed
                                 	inc_speed:
0004f2 9533                      		INC R19
0004f3 be1f                      		OUT SREG,R1
0004f4 919f                      		POP R25
0004f5 9518                      		RETI
                                 	max_speed:
0004f6 919f                      		POP R25
0004f7 be1f                      		OUT SREG,R1
0004f8 9518                      		RETI
                                 
                                 
                                 
                                 /******************\
                                 |* PROGRAM MEMORY *|
                                 \******************/
                                 
                                 ; Used to store the different texts to print on the screen : 1 -> column ON / 0 -> column OFF
                                 ; /!\ First line -> last row (the 7st) 
                                 ; /!\ On a given line, first number -> last column  
                                 
                                 Press_js_to_start:   ;.db = define byte / program memory	
0004f9 5222
0004fa 0043
0004fb 30c4
0004fc 6380
0004fd 213d                      	.db 0b00100010, 0b01010010, 0b01000011, 0b00000000, 0b11000100, 0b00110000, 0b10000000, 0b01100011, 0b00111101, 0b00100001
0004fe 5221
0004ff 8144
000500 4924
000501 9440
000502 a184                      	.db 0b00100001, 0b01010010, 0b01000100, 0b10000001, 0b00100100, 0b01001001, 0b01000000, 0b10010100, 0b10000100, 0b10100001
000503 d220
000504 0144
000505 4124
000506 8400
000507 6104                      	.db 0b00100000, 0b11010010, 0b01000100, 0b00000001, 0b00100100, 0b01000001, 0b00000000, 0b10000100, 0b00000100, 0b01100001
000508 de21
000509 0143
00050a 3124
00050b 6300
00050c e71c                      	.db 0b00100001, 0b11011110, 0b01000011, 0b00000001, 0b00100100, 0b00110001, 0b00000000, 0b01100011, 0b00011100, 0b11100111
00050d 5222
00050e 8140
00050f 0924
000510 1000
000511 2985                      	.db 0b00100010, 0b01010010, 0b01000000, 0b10000001, 0b00100100, 0b00001001, 0b00000000, 0b00010000, 0b10000101, 0b00101001
000512 5222
000513 8144
000514 4924
000515 9400
000516 2985                      	.db 0b00100010, 0b01010010, 0b01000100, 0b10000001, 0b00100100, 0b01001001, 0b00000000, 0b10010100, 0b10000101, 0b00101001
000517 cc79
000518 00f3
000519 33cf
00051a 63c0
00051b e73c                      	.db 0b01111001, 0b11001100, 0b11110011, 0b00000000, 0b11001111, 0b00110011, 0b11000000, 0b01100011, 0b00111100, 0b11100111
                                 
                                 score_zero:	
00051c 0000
00051d 0003
00051e 0300
00051f 66d2
000520 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
000521 0000
000522 8004
000523 0000
000524 914a
000525 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
000526 0000
000527 8004
000528 0000
000529 9046
00052a 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
00052b 0000
00052c 8004
00052d 0100
00052e 90ce
00052f 0098                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
000530 0000
000531 8004
000532 0000
000533 9052
000534 0084                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
000535 0000
000536 8004
000537 0000
000538 9152
000539 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
00053a 0000
00053b 0003
00053c 0300
00053d 66ce
00053e 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 score_one:
00053f 0000
000540 0004
000541 0300
000542 66d2
000543 0018                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
000544 0000
000545 0004
000546 0000
000547 914a
000548 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
000549 0000
00054a 0004
00054b 0000
00054c 9046
00054d 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
00054e 0000
00054f 0004
000550 0100
000551 90ce
000552 0098                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
000553 0000
000554 0005
000555 0000
000556 9052
000557 0084                      	.db 0b00000000, 0b00000000, 0b00000101, 0b00000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
000558 0000
000559 0006
00055a 0000
00055b 9152
00055c 0024                      	.db 0b00000000, 0b00000000, 0b00000110, 0b00000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
00055d 0000
00055e 0004
00055f 0300
000560 66ce
000561 0018                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 score_two:
000562 0000
000563 8007
000564 0300
000565 66d2
000566 0018                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
000567 0000
000568 8000
000569 0000
00056a 914a
00056b 0024                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
00056c 0000
00056d 0001
00056e 0000
00056f 9046
000570 00a0                      	.db 0b00000000, 0b00000000, 0b00000001, 0b00000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
000571 0000
000572 0002
000573 0100
000574 90ce
000575 0098                      	.db 0b00000000, 0b00000000, 0b00000010, 0b00000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
000576 0000
000577 0004
000578 0000
000579 9052
00057a 0084                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
00057b 0000
00057c 8004
00057d 0000
00057e 9152
00057f 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
000580 0000
000581 0003
000582 0300
000583 66ce
000584 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 score_three: 
000585 0000
000586 0003
000587 0300
000588 66d2
000589 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
00058a 0000
00058b 8004
00058c 0000
00058d 914a
00058e 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
00058f 0000
000590 0004
000591 0000
000592 9046
000593 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
000594 0000
000595 0003
000596 0100
000597 90ce
000598 0098                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
000599 0000
00059a 0004
00059b 0000
00059c 9052
00059d 0084                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
00059e 0000
00059f 8004
0005a0 0000
0005a1 9152
0005a2 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
0005a3 0000
0005a4 0003
0005a5 0300
0005a6 66ce
0005a7 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 score_four: 
0005a8 0000
0005a9 0004
0005aa 0300
0005ab 66d2
0005ac 0018                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
0005ad 0000
0005ae 0004
0005af 0000
0005b0 914a
0005b1 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
0005b2 0000
0005b3 0004
0005b4 0000
0005b5 9046
0005b6 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
0005b7 0000
0005b8 8007
0005b9 0100
0005ba 90ce
0005bb 0098                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
0005bc 0000
0005bd 8004
0005be 0000
0005bf 9052
0005c0 0084                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
0005c1 0000
0005c2 8004
0005c3 0000
0005c4 9152
0005c5 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
0005c6 0000
0005c7 8004
0005c8 0300
0005c9 66ce
0005ca 0018                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 score_five: 
0005cb 0000
0005cc 0003
0005cd 0300
0005ce 66d2
0005cf 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
0005d0 0000
0005d1 8004
0005d2 0000
0005d3 914a
0005d4 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
0005d5 0000
0005d6 0004
0005d7 0000
0005d8 9046
0005d9 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
0005da 0000
0005db 8003
0005dc 0100
0005dd 90ce
0005de 0098                      	.db 0b00000000, 0b00000000, 0b00000011, 0b10000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
0005df 0000
0005e0 8000
0005e1 0000
0005e2 9052
0005e3 0084                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
0005e4 0000
0005e5 8000
0005e6 0000
0005e7 9152
0005e8 0024                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
0005e9 0000
0005ea 8007
0005eb 0300
0005ec 66ce
0005ed 0018                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 	
                                 score_six: 	
0005ee 0000
0005ef 0003
0005f0 0300
0005f1 66d2
0005f2 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
0005f3 0000
0005f4 8004
0005f5 0000
0005f6 914a
0005f7 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
0005f8 0000
0005f9 8004
0005fa 0000
0005fb 9046
0005fc 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
0005fd 0000
0005fe 8003
0005ff 0100
000600 90ce
000601 0098                      	.db 0b00000000, 0b00000000, 0b00000011, 0b10000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
000602 0000
000603 8000
000604 0000
000605 9052
000606 0084                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
000607 0000
000608 8004
000609 0000
00060a 9152
00060b 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
00060c 0000
00060d 0003
00060e 0300
00060f 66ce
000610 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 	
                                 score_seven: 
000611 0000
000612 0004
000613 0300
000614 66d2
000615 0018                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
000616 0000
000617 0004
000618 0000
000619 914a
00061a 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
00061b 0000
00061c 0004
00061d 0000
00061e 9046
00061f 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
000620 0000
000621 0006
000622 0100
000623 90ce
000624 0098                      	.db 0b00000000, 0b00000000, 0b00000110, 0b00000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
000625 0000
000626 0004
000627 0000
000628 9052
000629 0084                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
00062a 0000
00062b 8004
00062c 0000
00062d 9152
00062e 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
00062f 0000
000630 8007
000631 0300
000632 66ce
000633 0018                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 score_eight: 
000634 0000
000635 0003
000636 0300
000637 66d2
000638 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
000639 0000
00063a 8004
00063b 0000
00063c 914a
00063d 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
00063e 0000
00063f 8004
000640 0000
000641 9046
000642 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
000643 0000
000644 0003
000645 0100
000646 90ce
000647 0098                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
000648 0000
000649 8004
00064a 0000
00064b 9052
00064c 0084                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
00064d 0000
00064e 8004
00064f 0000
000650 9152
000651 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
000652 0000
000653 0003
000654 0300
000655 66ce
000656 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 score_nine: 
000657 0000
000658 0003
000659 0300
00065a 66d2
00065b 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11010010, 0b01100110, 0b00011000, 0b00000000
00065c 0000
00065d 8004
00065e 0000
00065f 914a
000660 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01001010, 0b10010001, 0b00100100, 0b00000000
000661 0000
000662 0004
000663 0000
000664 9046
000665 00a0                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b01000110, 0b10010000, 0b10100000, 0b00000000
000666 0000
000667 0007
000668 0100
000669 90ce
00066a 0098                      	.db 0b00000000, 0b00000000, 0b00000111, 0b00000000, 0b00000000, 0b00000001, 0b11001110, 0b10010000, 0b10011000, 0b00000000
00066b 0000
00066c 8004
00066d 0000
00066e 9052
00066f 0084                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010000, 0b10000100, 0b00000000
000670 0000
000671 8004
000672 0000
000673 9152
000674 0024                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b01010010, 0b10010001, 0b00100100, 0b00000000
000675 0000
000676 0003
000677 0300
000678 66ce
000679 0018                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000011, 0b11001110, 0b01100110, 0b00011000, 0b00000000
                                 
                                 zero:	
00067a 0000
00067b 0060
00067c 0000
00067d 0000
00067e 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00067f 0000
000680 0090
000681 0000
000682 0000
000683 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000684 0000
000685 0090
000686 0000
000687 0000
000688 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000689 0000
00068a 0090
00068b 0000
00068c 0000
00068d 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00068e 0000
00068f 0090
000690 0000
000691 0000
000692 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000693 0000
000694 0090
000695 0000
000696 0000
000697 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000698 0000
000699 0060
00069a 0000
00069b 0000
00069c 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 one:
00069d 0000
00069e 0040
00069f 0000
0006a0 0000
0006a1 0000                      	.db 0b00000000, 0b00000000, 0b1000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006a2 0000
0006a3 0040
0006a4 0000
0006a5 0000
0006a6 0000                      	.db 0b00000000, 0b00000000, 0b1000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006a7 0000
0006a8 0040
0006a9 0000
0006aa 0000
0006ab 0000                      	.db 0b00000000, 0b00000000, 0b1000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006ac 0000
0006ad 0040
0006ae 0000
0006af 0000
0006b0 0000                      	.db 0b00000000, 0b00000000, 0b1000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006b1 0000
0006b2 0050
0006b3 0000
0006b4 0000
0006b5 0000                      	.db 0b00000000, 0b00000000, 0b1010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006b6 0000
0006b7 0060
0006b8 0000
0006b9 0000
0006ba 0000                      	.db 0b00000000, 0b00000000, 0b1100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006bb 0000
0006bc 0040
0006bd 0000
0006be 0000
0006bf 0000                      	.db 0b00000000, 0b00000000, 0b1000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 two:	
0006c0 0000
0006c1 00f0
0006c2 0000
0006c3 0000
0006c4 0000                      	.db 0b00000000, 0b00000000, 0b11110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006c5 0000
0006c6 0010
0006c7 0000
0006c8 0000
0006c9 0000                      	.db 0b00000000, 0b00000000, 0b00010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006ca 0000
0006cb 0020
0006cc 0000
0006cd 0000
0006ce 0000                      	.db 0b00000000, 0b00000000, 0b00100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006cf 0000
0006d0 0040
0006d1 0000
0006d2 0000
0006d3 0000                      	.db 0b00000000, 0b00000000, 0b01000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006d4 0000
0006d5 0080
0006d6 0000
0006d7 0000
0006d8 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006d9 0000
0006da 0090
0006db 0000
0006dc 0000
0006dd 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006de 0000
0006df 0060
0006e0 0000
0006e1 0000
0006e2 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 three:	
0006e3 0000
0006e4 0060
0006e5 0000
0006e6 0000
0006e7 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006e8 0000
0006e9 0090
0006ea 0000
0006eb 0000
0006ec 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006ed 0000
0006ee 0080
0006ef 0000
0006f0 0000
0006f1 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006f2 0000
0006f3 0060
0006f4 0000
0006f5 0000
0006f6 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006f7 0000
0006f8 0080
0006f9 0000
0006fa 0000
0006fb 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0006fc 0000
0006fd 0090
0006fe 0000
0006ff 0000
000700 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000701 0000
000702 0060
000703 0000
000704 0000
000705 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 four:	
000706 0000
000707 0080
000708 0000
000709 0000
00070a 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00070b 0000
00070c 0080
00070d 0000
00070e 0000
00070f 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000710 0000
000711 0080
000712 0000
000713 0000
000714 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000715 0000
000716 00f0
000717 0000
000718 0000
000719 0000                      	.db 0b00000000, 0b00000000, 0b11110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00071a 0000
00071b 0090
00071c 0000
00071d 0000
00071e 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00071f 0000
000720 0090
000721 0000
000722 0000
000723 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000724 0000
000725 0090
000726 0000
000727 0000
000728 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 five:	
000729 0000
00072a 0060
00072b 0000
00072c 0000
00072d 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00072e 0000
00072f 0090
000730 0000
000731 0000
000732 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000733 0000
000734 0080
000735 0000
000736 0000
000737 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000738 0000
000739 0070
00073a 0000
00073b 0000
00073c 0000                      	.db 0b00000000, 0b00000000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00073d 0000
00073e 0010
00073f 0000
000740 0000
000741 0000                      	.db 0b00000000, 0b00000000, 0b00010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000742 0000
000743 0010
000744 0000
000745 0000
000746 0000                      	.db 0b00000000, 0b00000000, 0b00010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000747 0000
000748 00f0
000749 0000
00074a 0000
00074b 0000                      	.db 0b00000000, 0b00000000, 0b11110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 six:	
00074c 0000
00074d 0060
00074e 0000
00074f 0000
000750 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000751 0000
000752 0090
000753 0000
000754 0000
000755 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000756 0000
000757 0090
000758 0000
000759 0000
00075a 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00075b 0000
00075c 0070
00075d 0000
00075e 0000
00075f 0000                      	.db 0b00000000, 0b00000000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000760 0000
000761 0010
000762 0000
000763 0000
000764 0000                      	.db 0b00000000, 0b00000000, 0b00010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000765 0000
000766 0090
000767 0000
000768 0000
000769 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00076a 0000
00076b 0060
00076c 0000
00076d 0000
00076e 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 seven:
00076f 0000
000770 0080
000771 0000
000772 0000
000773 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000774 0000
000775 0080
000776 0000
000777 0000
000778 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000779 0000
00077a 0080
00077b 0000
00077c 0000
00077d 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00077e 0000
00077f 00c0
000780 0000
000781 0000
000782 0000                      	.db 0b00000000, 0b00000000, 0b11000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000783 0000
000784 0080
000785 0000
000786 0000
000787 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000788 0000
000789 0090
00078a 0000
00078b 0000
00078c 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00078d 0000
00078e 00f0
00078f 0000
000790 0000
000791 0000                      	.db 0b00000000, 0b00000000, 0b11110000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 eight:	
000792 0000
000793 0060
000794 0000
000795 0000
000796 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
000797 0000
000798 0090
000799 0000
00079a 0000
00079b 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
00079c 0000
00079d 0090
00079e 0000
00079f 0000
0007a0 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007a1 0000
0007a2 0060
0007a3 0000
0007a4 0000
0007a5 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007a6 0000
0007a7 0090
0007a8 0000
0007a9 0000
0007aa 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007ab 0000
0007ac 0090
0007ad 0000
0007ae 0000
0007af 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007b0 0000
0007b1 0060
0007b2 0000
0007b3 0000
0007b4 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 nine:	
0007b5 0000
0007b6 0060
0007b7 0000
0007b8 0000
0007b9 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007ba 0000
0007bb 0090
0007bc 0000
0007bd 0000
0007be 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007bf 0000
0007c0 0080
0007c1 0000
0007c2 0000
0007c3 0000                      	.db 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007c4 0000
0007c5 00e0
0007c6 0000
0007c7 0000
0007c8 0000                      	.db 0b00000000, 0b00000000, 0b11100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007c9 0000
0007ca 0090
0007cb 0000
0007cc 0000
0007cd 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007ce 0000
0007cf 0090
0007d0 0000
0007d1 0000
0007d2 0000                      	.db 0b00000000, 0b00000000, 0b10010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
0007d3 0000
0007d4 0060
0007d5 0000
0007d6 0000
0007d7 0000                      	.db 0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 best_zero:	
0007d8 0000
0007d9 0003
0007da 0000
0007db 6708
0007dc 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
0007dd 0000
0007de 8004
0007df 0000
0007e0 9008
0007e1 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0007e2 0000
0007e3 8004
0007e4 0000
0007e5 8008
0007e6 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
0007e7 0000
0007e8 8004
0007e9 0000
0007ea 6308
0007eb 009c                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
0007ec 0000
0007ed 8004
0007ee 0000
0007ef 1008
0007f0 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
0007f1 0000
0007f2 8004
0007f3 0000
0007f4 9008
0007f5 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0007f6 0000
0007f7 0003
0007f8 0000
0007f9 671e
0007fa 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_one:
0007fb 0000
0007fc 0004
0007fd 0000
0007fe 6708
0007ff 009c                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
000800 0000
000801 0004
000802 0000
000803 9008
000804 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
000805 0000
000806 0004
000807 0000
000808 8008
000809 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
00080a 0000
00080b 0004
00080c 0000
00080d 6308
00080e 009c                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
00080f 0000
000810 0005
000811 0000
000812 1008
000813 00a4                      	.db 0b00000000, 0b00000000, 0b00000101, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
000814 0000
000815 0006
000816 0000
000817 9008
000818 00a4                      	.db 0b00000000, 0b00000000, 0b00000110, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
000819 0000
00081a 0004
00081b 0000
00081c 671e
00081d 009c                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_two:
00081e 0000
00081f 8007
000820 0000
000821 6708
000822 009c                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
000823 0000
000824 8000
000825 0000
000826 9008
000827 00a4                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
000828 0000
000829 0001
00082a 0000
00082b 8008
00082c 00a4                      	.db 0b00000000, 0b00000000, 0b00000001, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
00082d 0000
00082e 0002
00082f 0000
000830 6308
000831 009c                      	.db 0b00000000, 0b00000000, 0b00000010, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
000832 0000
000833 0004
000834 0000
000835 1008
000836 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
000837 0000
000838 8004
000839 0000
00083a 9008
00083b 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
00083c 0000
00083d 0003
00083e 0000
00083f 671e
000840 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_three:
000841 0000
000842 0003
000843 0000
000844 6708
000845 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
000846 0000
000847 8004
000848 0000
000849 9008
00084a 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
00084b 0000
00084c 0004
00084d 0000
00084e 8008
00084f 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
000850 0000
000851 0003
000852 0000
000853 6308
000854 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
000855 0000
000856 0004
000857 0000
000858 1008
000859 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
00085a 0000
00085b 8004
00085c 0000
00085d 9008
00085e 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
00085f 0000
000860 0003
000861 0000
000862 671e
000863 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_four:
000864 0000
000865 0004
000866 0000
000867 6708
000868 009c                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
000869 0000
00086a 0004
00086b 0000
00086c 9008
00086d 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
00086e 0000
00086f 0004
000870 0000
000871 8008
000872 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
000873 0000
000874 8007
000875 0000
000876 6308
000877 009c                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
000878 0000
000879 8004
00087a 0000
00087b 1008
00087c 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
00087d 0000
00087e 8004
00087f 0000
000880 9008
000881 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
000882 0000
000883 8004
000884 0000
000885 671e
000886 009c                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_five:	
000887 0000
000888 0003
000889 0000
00088a 6708
00088b 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
00088c 0000
00088d 8004
00088e 0000
00088f 9008
000890 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
000891 0000
000892 0004
000893 0000
000894 8008
000895 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
000896 0000
000897 8003
000898 0000
000899 6308
00089a 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
00089b 0000
00089c 8000
00089d 0000
00089e 1008
00089f 00a4                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
0008a0 0000
0008a1 8000
0008a2 0000
0008a3 9008
0008a4 00a4                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0008a5 0000
0008a6 8007
0008a7 0000
0008a8 671e
0008a9 009c                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_six:	
0008aa 0000
0008ab 0003
0008ac 0000
0008ad 6708
0008ae 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
0008af 0000
0008b0 8004
0008b1 0000
0008b2 9008
0008b3 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0008b4 0000
0008b5 8004
0008b6 0000
0008b7 8008
0008b8 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
0008b9 0000
0008ba 8003
0008bb 0000
0008bc 6308
0008bd 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
0008be 0000
0008bf 8000
0008c0 0000
0008c1 1008
0008c2 00a4                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
0008c3 0000
0008c4 8004
0008c5 0000
0008c6 9008
0008c7 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0008c8 0000
0008c9 0003
0008ca 0000
0008cb 671e
0008cc 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_seven:
0008cd 0000
0008ce 0004
0008cf 0000
0008d0 6708
0008d1 009c                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
0008d2 0000
0008d3 0004
0008d4 0000
0008d5 9008
0008d6 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0008d7 0000
0008d8 0004
0008d9 0000
0008da 8008
0008db 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
0008dc 0000
0008dd 0006
0008de 0000
0008df 6308
0008e0 009c                      	.db 0b00000000, 0b00000000, 0b00000110, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
0008e1 0000
0008e2 0004
0008e3 0000
0008e4 1008
0008e5 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
0008e6 0000
0008e7 8004
0008e8 0000
0008e9 9008
0008ea 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0008eb 0000
0008ec 8007
0008ed 0000
0008ee 671e
0008ef 009c                      	.db 0b00000000, 0b00000000, 0b00000111, 0b10000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_eight:
0008f0 0000
0008f1 0003
0008f2 0000
0008f3 6708
0008f4 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
0008f5 0000
0008f6 8004
0008f7 0000
0008f8 9008
0008f9 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
0008fa 0000
0008fb 8004
0008fc 0000
0008fd 8008
0008fe 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
0008ff 0000
000900 0003
000901 0000
000902 6308
000903 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
000904 0000
000905 8004
000906 0000
000907 1008
000908 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
000909 0000
00090a 8004
00090b 0000
00090c 9008
00090d 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
00090e 0000
00090f 0003
000910 0000
000911 671e
000912 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 best_nine:	
000913 0000
000914 0003
000915 0000
000916 6708
000917 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100111, 0b10011100, 0b00000000
000918 0000
000919 8004
00091a 0000
00091b 9008
00091c 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
00091d 0000
00091e 0004
00091f 0000
000920 8008
000921 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b10000000, 0b10100100, 0b00000000
000922 0000
000923 0007
000924 0000
000925 6308
000926 009c                      	.db 0b00000000, 0b00000000, 0b00000111, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b01100011, 0b10011100, 0b00000000
000927 0000
000928 8004
000929 0000
00092a 1008
00092b 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b00010000, 0b10100100, 0b00000000
00092c 0000
00092d 8004
00092e 0000
00092f 9008
000930 00a4                      	.db 0b00000000, 0b00000000, 0b00000100, 0b10000000, 0b00000000, 0b00000000, 0b00001000, 0b10010000, 0b10100100, 0b00000000
000931 0000
000932 0003
000933 0000
000934 671e
000935 009c                      	.db 0b00000000, 0b00000000, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00011110, 0b01100111, 0b10011100, 0b00000000
                                 
                                 switch_sound:
000936 4c1a
000937 0063
000938 02c9
000939 f04c
00093a c024                      	.db 0b00011010, 0b01001100, 0b01100011, 0b00000000, 0b11001001, 0b00000010, 0b01001100, 0b11110000, 0b00100100, 0b11000000
00093b 522a
00093c 8194
00093d 0329
00093e 10d2
00093f 203d                      	.db 0b00101010, 0b01010010, 0b10010100, 0b10000001, 0b00101001, 0b00000011, 0b11010010, 0b00010000, 0b00111101, 0b00100000
000940 524a
000941 0194
000942 0229
000943 1052
000944 0025                      	.db 0b01001010, 0b01010010, 0b10010100, 0b00000001, 0b00101001, 0b00000010, 0b01010010, 0b00010000, 0b00100101, 0b00000000
000945 524a
000946 0193
000947 0229
000948 1052
000949 c024                      	.db 0b01001010, 0b01010010, 0b10010011, 0b00000001, 0b00101001, 0b00000010, 0b01010010, 0b00010000, 0b00100100, 0b11000000
00094a 524b
00094b 8190
00094c 022d
00094d 1052
00094e 2024                      	.db 0b01001011, 0b01010010, 0b10010000, 0b10000001, 0b00101101, 0b00000010, 0b01010010, 0b00010000, 0b00100100, 0b00100000
00094f d22a
000950 8194
000951 022b
000952 1052
000953 2025                      	.db 0b00101010, 0b11010010, 0b10010100, 0b10000001, 0b00101011, 0b00000010, 0b01010010, 0b00010000, 0b00100101, 0b00100000
000954 521a
000955 0063
000956 02c9
000957 104c
000958 c024                      	.db 0b00011010, 0b01010010, 0b01100011, 0b00000000, 0b11001001, 0b00000010, 0b01001100, 0b00010000, 0b00100100, 0b11000000
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   1 r0 :   1 r1 :   6 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  78 r17:  17 r18:  22 r19:   8 r20:  16 
r21:  39 r22:  11 r23:  38 r24:   7 r25:  23 r26: 118 r27:  76 r28:  60 
r29:   9 r30:  72 r31:  61 
Registers used: 19 out of 35 (54.3%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   4 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   3 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 brlt  :   0 brmi  :   0 
brne  :  93 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  94 cbi   :  18 cbr   :   0 
clc   :   0 clh   :   0 cli   :   4 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   5 cpc   :   0 
cpi   :   0 cpse  :  45 dec   :  92 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 inc   :  10 jmp   :   0 
ld    :   0 ldd   :   0 ldi   : 361 lds   :   2 lpm   :   1 lsl   :   1 
lsr   :   1 mov   :  14 movw  :   1 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   4 or    :   0 ori   :   0 out   :  13 pop   :   6 
push  :   5 rcall :  19 ret   :  20 reti  :   4 rjmp  : 190 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  44 sbic  :  30 sbis  :  16 
sbiw  :   0 sbr   :   0 sbrc  :   3 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   5 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  14 
sub   :   5 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 35 out of 113 (31.0%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0012b2   2486   2240   4726   32768  14.4%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
